{"cells":[{"cell_type":"code","execution_count":23,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":21,"status":"ok","timestamp":1651555158773,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"},"user_tz":-330},"id":"EJtX5aaVFKgS"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.model_selection import KFold\n","from numpy.random import rand\n","from sklearn.neighbors import KNeighborsClassifier\n","import matplotlib.pyplot as plt\n","import time"]},{"cell_type":"code","execution_count":24,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1651555158774,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"},"user_tz":-330},"id":"gbX696WXAslG"},"outputs":[],"source":["def error_rate(features, target, x, opts):\n","    # parameters\n","    k     = opts['k']\n","    cv    = opts['cv']\n","\n","    kf = KFold(n_splits=cv, shuffle=True, random_state=2)\n","\n","    total_error = 0\n","\n","    for train_index, test_index in kf.split(features):\n","      X_train, X_test = features[train_index], features[test_index]\n","      y_train, y_test = target[train_index], target[test_index]\n","\n","      # Number of instances\n","      num_train = np.size(X_train, 0)\n","      num_test  = np.size(X_test, 0)\n","      \n","      # Define selected features\n","      xtrain = X_train[:, x==1]\n","      ytrain = y_train.reshape(num_train)\n","      xtest  = X_test[:, x==1]\n","      ytest  = y_test.reshape(num_test)\n","\n","      # Training\n","      knn = KNeighborsClassifier(n_neighbors=k)\n","      knn.fit(xtrain, ytrain)\n","\n","      # Prediction\n","      ypred = knn.predict(xtest)\n","      acc   = np.sum(ytest == ypred) / num_test\n","      error = 1 - acc\n","\n","      total_error = total_error + error\n","      \n","    return total_error/cv"]},{"cell_type":"code","execution_count":25,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":17,"status":"ok","timestamp":1651555158775,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"},"user_tz":-330},"id":"36YgnDeM_mTW"},"outputs":[],"source":["def Fun(features, target, x, opts):\n","    # Parameters\n","    alpha    = 0.99\n","    beta     = 1 - alpha\n","    # Original feature size\n","    max_feat = len(x)\n","    # Number of selected features\n","    num_feat = np.sum(x == 1)\n","    # Solve if no feature selected\n","    if num_feat == 0:\n","        cost  = 1\n","    else:\n","        # Get error rate\n","        error = error_rate(features, target, x, opts)\n","        # Objective function\n","        cost  = alpha * error + beta * (num_feat / max_feat)\n","        \n","    return cost"]},{"cell_type":"code","execution_count":26,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1651555158775,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"},"user_tz":-330},"id":"UIIs5LfF_zD9"},"outputs":[],"source":["def init_position(lb, ub, N, dim):\n","    X = np.zeros([N, dim], dtype='float')\n","    R = rand()\n","    u = 1 + R\n","    for d in range(dim):\n","        X[0,d] = lb[0,d] + (ub[0,d] - lb[0,d]) * rand()\n","    for i in range(1, N):\n","        for d in range(dim):\n","            if X[i-1,d] \u003c= 0.5:\n","                X[i,d] = u * X[i-1,d]\n","            else:\n","                X[i,d] = u * (1 - X[i-1,d])\n","    \n","    return X"]},{"cell_type":"code","execution_count":27,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1651555158776,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"},"user_tz":-330},"id":"Q2GwviAx_6cG"},"outputs":[],"source":["def binary_conversion(X, thres, N, dim):\n","    Xbin = np.zeros([N, dim], dtype='int')\n","    for i in range(N):\n","        for d in range(dim):\n","            # xi = 1/(1 + np.exp(-X[i,d]))\n","            # if xi \u003e rand():\n","            if X[i,d] \u003e 0.5:\n","                Xbin[i,d] = 0\n","            else:\n","                Xbin[i,d] = 1\n","    \n","    return Xbin"]},{"cell_type":"code","execution_count":28,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1651555158777,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"},"user_tz":-330},"id":"D1GVeQ3j_-Ue"},"outputs":[],"source":["def boundary(x, lb, ub):\n","    if x \u003c lb:\n","        x = lb\n","    if x \u003e ub:\n","        x = ub\n","    \n","    return x"]},{"cell_type":"code","execution_count":29,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":1665,"status":"ok","timestamp":1651555160427,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"},"user_tz":-330},"id":"KcfLyiqKADkB"},"outputs":[],"source":["def gwo_ssa_random(features, target, opts):\n","    # Parameters\n","    ub    = 1\n","    lb    = 0\n","    thres = rand()    # NEED TO CHANGE\n","\n","    C1 = 2\n","    C2 = 2\n","\n","    N        = opts['N']\n","    max_iter = opts['T']\n","    if 'w' in opts:\n","        w    = opts['w']\n","    if 'c1' in opts:\n","        c1   = opts['c1']\n","    if 'c2' in opts:\n","        c2   = opts['c2'] \n","    \n","    # Dimension\n","    dim = np.size(features, 1)\n","    if np.size(lb) == 1:\n","        ub = ub * np.ones([1, dim], dtype='float')\n","        lb = lb * np.ones([1, dim], dtype='float')\n","        \n","    # Initialize position\n","    X     = init_position(lb, ub, N, dim)\n","\n","    # Binary conversion\n","    Xbin  = binary_conversion(X, thres, N, dim)\n","\n","    # Fitness at first iteration\n","    fit    = np.zeros([N, 1], dtype='float')\n","    Xalpha = np.zeros([1, dim], dtype='float')\n","    Xbeta  = np.zeros([1, dim], dtype='float')\n","    Xdelta = np.zeros([1, dim], dtype='float')\n","    Falpha = float('inf')\n","    Fbeta  = float('inf')\n","    Fdelta = float('inf')\n","\n","    #################################################\n","    ########## GWO ##################################\n","    #################################################\n","\n","    for i in range(N):\n","      fit[i,0] = Fun(features, target, Xbin[i,:], opts)\n","      if fit[i,0] \u003c Falpha:\n","        Xalpha[0,:] = X[i,:]\n","        Falpha      = fit[i,0]\n","\n","      if fit[i,0] \u003c Fbeta and fit[i,0] \u003e Falpha:\n","        Xbeta[0,:]  = X[i,:]\n","        beta       = fit[i,0]\n","            \n","      if fit[i,0] \u003c Fdelta and fit[i,0] \u003e Fbeta and fit[i,0] \u003e Falpha:\n","        Xdelta[0,:] = X[i,:]\n","        Fdelta      = fit[i,0]\n","\n","    # Pre\n","    curve = np.zeros([1, max_iter], dtype='float')\n","    t     = 0\n","\n","    curve[0,t] = Falpha.copy()\n","    print(\"Iteration:\", t + 1)\n","    print(\"Best (GWO):\", curve[0,t])\n","    t += 1\n","    \n","    while t \u003c max_iter:\n","        randomSwitcher = rand()\n","\n","        if randomSwitcher \u003c 0.5:\n","            # Coefficient decreases linearly from 2 to 0 \n","            a = 2 - t * (2 / max_iter)\n","            \n","            for i in range(N):\n","                for d in range(dim):\n","                    # Random values\n","                    r1     = rand()\n","                    r2     = rand()\n","                    # Parameter C (3.4)\n","                    C1     = 2 * rand()\n","                    C2     = 2 * rand()\n","                    C3     = 2 * rand()\n","                    # Compute Dalpha, Dbeta \u0026 Ddelta (3.5)\n","                    Dalpha = abs(C1 * Xalpha[0,d] - X[i,d]) \n","                    Dbeta  = abs(C2 * Xbeta[0,d] - X[i,d])\n","                    Ddelta = abs(C3 * Xdelta[0,d] - X[i,d])\n","                    # Parameter A (3.3)\n","                    A1     = 2 * a * rand() - a\n","                    A2     = 2 * a * rand() - a\n","                    A3     = 2 * a * rand() - a\n","                    # Compute X1, X2 \u0026 X3 (3.6) \n","                    X1     = Xalpha[0,d] - A1 * Dalpha\n","                    X2     = Xbeta[0,d] - A2 * Dbeta\n","                    X3     = Xdelta[0,d] - A3 * Ddelta\n","                    # Compute W1, W2, \u0026 W3\n","                    W1     = abs(X1)/abs(X1 + X2 + X3)\n","                    W2     = abs(X2)/abs(X1 + X2 + X3)\n","                    W3     = abs(X3)/abs(X1 + X2 + X3)\n","                    # Update wolf (3.7)\n","                    X[i,d] = C1 * r1 * (W1*X1 + W2*X2 + W3*X3) + C2 * r2 * X[i,d]              \n","                    # Boundary\n","                    X[i,d] = boundary(X[i,d], lb[0,d], ub[0,d])\n","\n","        else:\n","\n","            c1 = 2 * np.exp(-(4 * t / max_iter) ** 2)\n","            \n","            for i in range(N):          \n","                # First leader update\n","                if i == 0:  \n","                    for d in range(dim):\n","                        # Coefficient c2 \u0026 c3 [0 ~ 1]\n","                        c2 = rand() \n","                        c3 = rand()\n","                        # Leader update (3.1)\n","                        if c3 \u003e= 0.5: \n","                            X[i,d] = Xalpha[0,d] + c1 * ((ub[0,d] - lb[0,d]) * c2 + lb[0,d])\n","                        else:\n","                            X[i,d] = Xalpha[0,d] - c1 * ((ub[0,d] - lb[0,d]) * c2 + lb[0,d])\n","                    \n","                        # Boundary\n","                        X[i,d] = boundary(X[i,d], lb[0,d], ub[0,d]) \n","                    \n","                # Salp update\n","                elif i \u003e= 1:\n","                    for d in range(dim):\n","                        # Salp update by following front salp (3.4)\n","                        X[i,d] = (X[i,d] + X[i-1, d]) / 2\n","                        # Boundary\n","                        X[i,d] = boundary(X[i,d], lb[0,d], ub[0,d])\n","\n","        # Binary conversion\n","        Xbin  = binary_conversion(X, thres, N, dim)\n","        \n","        # Fitness\n","        for i in range(N):\n","            fit[i,0] = Fun(features, target, Xbin[i,:], opts)\n","            if fit[i,0] \u003c Falpha:\n","                Xalpha[0,:] = X[i,:]\n","                Falpha      = fit[i,0]\n","                \n","            if fit[i,0] \u003c Fbeta and fit[i,0] \u003e Falpha:\n","                Xbeta[0,:]  = X[i,:]\n","                Fbeta       = fit[i,0]\n","                \n","            if fit[i,0] \u003c Fdelta and fit[i,0] \u003e Fbeta and fit[i,0] \u003e Falpha:\n","                Xdelta[0,:] = X[i,:]\n","                Fdelta      = fit[i,0]\n","\n","        curve[0,t] = Falpha.copy()\n","        print(\"Iteration:\", t + 1)\n","        print(\"Best (GWO + SSA (Random)):\", curve[0,t])\n","        t += 1\n","                \n","    # Best feature subset\n","    Gbin       = binary_conversion(Xalpha, thres, 1, dim) \n","    Gbin       = Gbin.reshape(dim)\n","    pos        = np.asarray(range(0, dim))    \n","    sel_index  = pos[Gbin == 1]\n","    num_feat   = len(sel_index)\n","    # Create dictionary\n","    gwo_data = {'sf': sel_index, 'c': curve, 'nf': num_feat}\n","    \n","    return gwo_data "]},{"cell_type":"code","execution_count":30,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1651555160428,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"},"user_tz":-330},"id":"JX1PEKlVF5ko"},"outputs":[],"source":["# #####################################################################\n","# #######         WINE\n","# #####################################################################\n","\n","# column_headers = ['Type', 'Alcohol', 'Malic acid', 'Ash', 'Alcalinity of ash', 'Magnesium', 'Total phenols',\n","#                   'Flavanoids', 'Nonflavanoid phenols', 'Proanthocyanins', 'Color Intensity',\n","#                    'Hue', 'OD280/OD315 of diluted wines', 'Proline']\n","# data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data', sep=\",\", header=None)\n","# # data = data.values\n","# data.dropna(inplace=True)\n","# dataArray = data.to_numpy()\n","\n","# print(\"Data: \", data)\n","\n","# features  = np.asarray(dataArray[:, 1:])\n","# target = np.asarray(dataArray[:, 0])"]},{"cell_type":"code","execution_count":31,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1651555160429,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"},"user_tz":-330},"id":"903021BERKby"},"outputs":[],"source":["# #####################################################################\n","# #######         BREAST CANCER\n","# #####################################################################\n","\n","# data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data', header=None)\n","# data.columns = ['Sample code', 'Clump Thickness', 'Uniformity of Cell Size', 'Uniformity of Cell Shape',\n","#                 'Marginal Adhesion', 'Single Epithelial Cell Size', 'Bare Nuclei', 'Bland Chromatin',\n","#                 'Normal Nucleoli', 'Mitoses','Class']\n","\n","# data = data.drop(['Sample code'],axis=1)\n","# # data = data.values\n","# print(data.shape[0])\n","# data = data.replace(\"?\",np.NaN)\n","# print(data.isnull().values.any())\n","# data.dropna(inplace=True)\n","# print(data.shape[0])\n","# data['Bare Nuclei'] = pd.to_numeric(data['Bare Nuclei'])\n","# dataArray = data.to_numpy()\n","\n","# print(\"Data: \", data)\n","\n","# features  = np.asarray(dataArray[:, 1:-1])\n","# target = np.asarray(dataArray[:, -1])"]},{"cell_type":"code","execution_count":32,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1651555160430,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"},"user_tz":-330},"id":"uFO-xQ74ncSM"},"outputs":[],"source":["# #####################################################################\n","# #######         ZOO\n","# #####################################################################\n","\n","# data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/zoo/zoo.data', header=None)\n","# # data = data.values\n","# data = data.loc[:, data.columns != 0]\n","# data = data.astype(float)\n","# print(data.shape[0])\n","# print(data.isnull().values.any())\n","# data.dropna(inplace=True)\n","# print(data.shape[0])\n","# dataArray = data.to_numpy()\n","\n","# print(\"Data: \", data)\n","\n","# features  = np.asarray(dataArray[:, 0:-1])\n","# target = np.asarray(dataArray[:, -1])"]},{"cell_type":"code","execution_count":33,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1651555160431,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"},"user_tz":-330},"id":"l4dguS-ph9T4"},"outputs":[],"source":["# #####################################################################\n","# #######         SONAR\n","# #####################################################################\n","\n","# data = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/undocumented/connectionist-bench/sonar/sonar.all-data', header=None)\n","# # data = data.values\n","# mymap = {'R': 1, 'M': 2}\n","# data = data.applymap(lambda s: mymap.get(s) if s in mymap else s)\n","\n","# print(data.shape[0])\n","# print(data.isnull().values.any())\n","# data.dropna(inplace=True)\n","# print(data.shape[0])\n","# dataArray = data.to_numpy()\n","\n","# print(\"Data: \", data)\n","\n","# features  = np.asarray(dataArray[:, 0:-1])\n","# target = np.asarray(dataArray[:, -1])"]},{"cell_type":"code","execution_count":34,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1651555160431,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"},"user_tz":-330},"id":"il9GXkFDjclR"},"outputs":[],"source":["# #####################################################################\n","# #######         LYMPHOGRAPHY\n","# #####################################################################\n","\n","# data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/lymphography/lymphography.data', header=None)\n","# # data = data.values\n","\n","# print(data.shape[0])\n","# print(data.isnull().values.any())\n","# data.dropna(inplace=True)\n","# print(data.shape[0])\n","# dataArray = data.to_numpy()\n","\n","# print(\"Data: \", data)\n","\n","# features  = np.asarray(dataArray[:, 1:])\n","# target = np.asarray(dataArray[:, 0])"]},{"cell_type":"code","execution_count":35,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1651555160432,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"},"user_tz":-330},"id":"wLTXml9EnCGr"},"outputs":[{"name":"stdout","output_type":"stream","text":["435\n","True\n","232\n","Data:       0    1    2    3    4    5    6    7    8    9    10   11   12   13   14  \\\n","5     1  0.0  1.0  1.0  0.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  1.0   \n","8     2  0.0  1.0  0.0  1.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  1.0  1.0  1.0   \n","19    1  1.0  1.0  1.0  0.0  0.0  0.0  1.0  1.0  1.0  0.0  1.0  0.0  0.0  0.0   \n","23    1  1.0  1.0  1.0  0.0  0.0  0.0  1.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0   \n","25    1  1.0  0.0  1.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0  0.0  0.0  0.0  0.0   \n","..   ..  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...   \n","423   1  0.0  1.0  1.0  0.0  0.0  1.0  1.0  1.0  1.0  0.0  1.0  0.0  0.0  1.0   \n","426   1  1.0  0.0  1.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0  0.0  0.0  0.0  0.0   \n","427   2  0.0  0.0  0.0  1.0  1.0  1.0  1.0  1.0  0.0  1.0  0.0  1.0  1.0  1.0   \n","430   2  0.0  0.0  1.0  1.0  1.0  1.0  0.0  0.0  1.0  1.0  0.0  1.0  1.0  1.0   \n","431   1  0.0  0.0  1.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0  0.0  0.0  0.0  0.0   \n","\n","      15   16  \n","5    1.0  1.0  \n","8    0.0  1.0  \n","19   1.0  1.0  \n","23   1.0  1.0  \n","25   1.0  1.0  \n","..   ...  ...  \n","423  1.0  1.0  \n","426  1.0  1.0  \n","427  0.0  1.0  \n","430  0.0  1.0  \n","431  0.0  1.0  \n","\n","[232 rows x 17 columns]\n"]}],"source":["# #####################################################################\n","# #######         CONGRESS\n","# #####################################################################\n","\n","# data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/voting-records/house-votes-84.data', header=None)\n","# # data = data.values\n","# mymap = {'n': 0, 'y': 1, 'democrat': 1, 'republican': 2}\n","# data = data.applymap(lambda s: mymap.get(s) if s in mymap else s)\n","\n","# print(data.shape[0])\n","# data = data.replace(\"?\",np.NaN)\n","# print(data.isnull().values.any())\n","# data.dropna(inplace=True)\n","# print(data.shape[0])\n","# dataArray = data.to_numpy()\n","\n","# print(\"Data: \", data)\n","\n","# features  = np.asarray(dataArray[:, 1:])\n","# target = np.asarray(dataArray[:, 0])"]},{"cell_type":"code","execution_count":36,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1651555160432,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"},"user_tz":-330},"id":"TiLc9BxJqZ01"},"outputs":[],"source":["# #####################################################################\n","# #######         IONOSPHERE\n","# #####################################################################\n","\n","# data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/ionosphere/ionosphere.data', header=None)\n","# # data = data.values\n","# mymap = {'g': 1, 'b': 2}\n","# data = data.applymap(lambda s: mymap.get(s) if s in mymap else s)\n","\n","# print(data.shape[0])\n","# data = data.replace(\"?\",np.NaN)\n","# print(data.isnull().values.any())\n","# data.dropna(inplace=True)\n","# print(data.shape[0])\n","# dataArray = data.to_numpy()\n","\n","# print(\"Data: \", data)\n","\n","# features  = np.asarray(dataArray[:, 0:-1])\n","# target = np.asarray(dataArray[:, -1])"]},{"cell_type":"code","execution_count":37,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":720,"status":"ok","timestamp":1651555161136,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"},"user_tz":-330},"id":"s29v98J3wBtt"},"outputs":[],"source":["# #####################################################################\n","# #######         CHESS\n","# #####################################################################\n","\n","# data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/chess/king-rook-vs-king-pawn/kr-vs-kp.data', header=None)\n","# # data = data.values\n","# mymap = {'f': 0., 't': 1., 'n': 0., 'w': 1., 'b': 2., 'l': 0., 'g': 1., 'won': 1., 'nowin': 2.}\n","# data = data.applymap(lambda s: mymap.get(s) if s in mymap else s)\n","\n","# print(data.shape[0])\n","# data = data.replace(\"?\",np.NaN)\n","# print(data.isnull().values.any())\n","# data.dropna(inplace=True)\n","# print(data.shape[0])\n","# dataArray = data.to_numpy()\n","\n","# print(\"Data: \", data)\n","\n","# features  = np.asarray(dataArray[:, 0:-1])\n","# target = np.asarray(dataArray[:, -1])"]},{"cell_type":"code","execution_count":38,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":28,"status":"ok","timestamp":1651555161138,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"},"user_tz":-330},"id":"UVTlCBdoAGEV"},"outputs":[],"source":["# #####################################################################\n","# #######         TIC-TAC-TOE\n","# #####################################################################\n","\n","# data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/tic-tac-toe/tic-tac-toe.data', header=None)\n","# # data = data.values\n","# mymap = {'x': 1., 'o': 2., 'b': 3., 'positive': 1., 'negative': 2.}\n","# data = data.applymap(lambda s: mymap.get(s) if s in mymap else s)\n","\n","# print(data.shape[0])\n","# data = data.replace(\"?\",np.NaN)\n","# print(data.isnull().values.any())\n","# data.dropna(inplace=True)\n","# print(data.shape[0])\n","# dataArray = data.to_numpy()\n","\n","# print(\"Data: \", data)\n","\n","# features  = np.asarray(dataArray[:, 0:-1])\n","# target = np.asarray(dataArray[:, -1])"]},{"cell_type":"code","execution_count":39,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":25,"status":"ok","timestamp":1651555161138,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"},"user_tz":-330},"id":"4DXBBeP1xJbW"},"outputs":[],"source":["# #####################################################################\n","# #######         WDBC\n","# #####################################################################\n","\n","# data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data', header=None)\n","# # data = data.values\n","# mymap = {'M': 1., 'B': 2.}\n","# data = data.applymap(lambda s: mymap.get(s) if s in mymap else s)\n","# data = data.loc[:, data.columns != 0]\n","\n","# print(data.shape[0])\n","# data = data.replace(\"?\",np.NaN)\n","# print(data.isnull().values.any())\n","# data.dropna(inplace=True)\n","# print(data.shape[0])\n","# dataArray = data.to_numpy()\n","\n","# print(\"Data: \", data)\n","\n","# features  = np.asarray(dataArray[:, 1:])\n","# target = np.asarray(dataArray[:, 0])"]},{"cell_type":"code","execution_count":40,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25,"status":"ok","timestamp":1651555161139,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"},"user_tz":-330},"id":"dPrVsZhAFTfQ"},"outputs":[{"name":"stdout","output_type":"stream","text":["Feature:  [[0. 1. 1. ... 1. 1. 1.]\n"," [0. 1. 0. ... 1. 0. 1.]\n"," [1. 1. 1. ... 0. 1. 1.]\n"," ...\n"," [0. 0. 0. ... 1. 0. 1.]\n"," [0. 0. 1. ... 1. 0. 1.]\n"," [0. 0. 1. ... 0. 0. 1.]]\n"]}],"source":["print(\"Feature: \", features)"]},{"cell_type":"code","execution_count":41,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20,"status":"ok","timestamp":1651555161140,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"},"user_tz":-330},"id":"XtX3qwmX9qVR"},"outputs":[{"name":"stdout","output_type":"stream","text":["Target:  [1. 2. 1. 1. 1. 1. 1. 2. 1. 2. 1. 2. 1. 2. 2. 2. 1. 1. 1. 1. 1. 1. 2. 2.\n"," 2. 2. 2. 2. 1. 2. 2. 2. 1. 2. 2. 1. 1. 1. 1. 2. 2. 2. 1. 2. 2. 1. 1. 1.\n"," 1. 1. 1. 1. 1. 1. 1. 2. 1. 1. 2. 1. 2. 2. 1. 2. 2. 2. 1. 1. 2. 2. 2. 1.\n"," 2. 1. 2. 1. 1. 2. 2. 2. 1. 1. 1. 2. 2. 2. 1. 1. 1. 2. 1. 1. 1. 1. 1. 1.\n"," 1. 1. 1. 1. 1. 2. 1. 2. 1. 1. 2. 1. 1. 2. 2. 1. 2. 1. 2. 2. 2. 2. 2. 1.\n"," 1. 2. 1. 1. 1. 2. 2. 1. 2. 1. 1. 2. 1. 1. 1. 1. 2. 2. 1. 1. 2. 2. 2. 2.\n"," 2. 1. 2. 1. 1. 1. 1. 2. 1. 1. 2. 2. 2. 2. 2. 2. 1. 2. 1. 1. 2. 2. 1. 1.\n"," 1. 1. 2. 1. 2. 1. 2. 1. 1. 1. 2. 2. 2. 1. 2. 2. 2. 2. 1. 2. 2. 2. 2. 2.\n"," 1. 1. 2. 2. 1. 1. 2. 2. 1. 2. 2. 1. 1. 1. 1. 2. 1. 1. 2. 2. 2. 1. 1. 2.\n"," 2. 1. 2. 1. 2. 1. 1. 1. 2. 1. 1. 1. 1. 2. 2. 1.]\n"]}],"source":["print(\"Target: \", target)"]},{"cell_type":"code","execution_count":42,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1651555161140,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"},"user_tz":-330},"id":"8vLuNbkZ-XcK"},"outputs":[],"source":["num_runs = 20    # number of independent runs\n","k        = 5     # k-value in KNN\n","N        = 5     # number of particles\n","T        = 20    # maximum number of iterations\n","cv       = 10    # K-fold cross-validation\n","opts     = {'k':k, 'N':N, 'T':T, 'cv': cv}\n","dim      = features.shape[1]"]},{"cell_type":"code","execution_count":43,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":741060,"status":"ok","timestamp":1651555902185,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"},"user_tz":-330},"id":"3wRzIhMkAMZ6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Run  1\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.08319021739130435\n","Iteration: 2\n","Best (GWO + SSA (Random)): 0.06309782608695652\n","Iteration: 3\n","Best (GWO + SSA (Random)): 0.0392554347826087\n","Iteration: 4\n","Best (GWO + SSA (Random)): 0.0380054347826087\n","Iteration: 5\n","Best (GWO + SSA (Random)): 0.0380054347826087\n","Iteration: 6\n","Best (GWO + SSA (Random)): 0.0380054347826087\n","Iteration: 7\n","Best (GWO + SSA (Random)): 0.0380054347826087\n","Iteration: 8\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 9\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 10\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 11\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 12\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 13\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 14\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 15\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 16\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 17\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 18\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 19\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 20\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","SF [ 3  5  7 11 12]\n","Accuracy: 96.97463768115944\n","Feature Size: 5\n","Fitness 0.03307608695652174\n","--------------------------------------------------\n","Run  2\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.07969021739130436\n","Iteration: 2\n","Best (GWO + SSA (Random)): 0.07969021739130436\n","Iteration: 3\n","Best (GWO + SSA (Random)): 0.06309782608695653\n","Iteration: 4\n","Best (GWO + SSA (Random)): 0.06309782608695653\n","Iteration: 5\n","Best (GWO + SSA (Random)): 0.05629347826086958\n","Iteration: 6\n","Best (GWO + SSA (Random)): 0.05629347826086958\n","Iteration: 7\n","Best (GWO + SSA (Random)): 0.05629347826086958\n","Iteration: 8\n","Best (GWO + SSA (Random)): 0.05629347826086958\n","Iteration: 9\n","Best (GWO + SSA (Random)): 0.05629347826086958\n","Iteration: 10\n","Best (GWO + SSA (Random)): 0.05629347826086958\n","Iteration: 11\n","Best (GWO + SSA (Random)): 0.05629347826086958\n","Iteration: 12\n","Best (GWO + SSA (Random)): 0.05629347826086958\n","Iteration: 13\n","Best (GWO + SSA (Random)): 0.05629347826086958\n","Iteration: 14\n","Best (GWO + SSA (Random)): 0.05629347826086958\n","Iteration: 15\n","Best (GWO + SSA (Random)): 0.05629347826086958\n","Iteration: 16\n","Best (GWO + SSA (Random)): 0.05629347826086958\n","Iteration: 17\n","Best (GWO + SSA (Random)): 0.05629347826086958\n","Iteration: 18\n","Best (GWO + SSA (Random)): 0.05629347826086958\n","Iteration: 19\n","Best (GWO + SSA (Random)): 0.05629347826086958\n","Iteration: 20\n","Best (GWO + SSA (Random)): 0.05629347826086958\n","SF [ 0  3  4  5  6  7 11 14]\n","Accuracy: 94.81884057971014\n","Feature Size: 8\n","Fitness 0.05629347826086958\n","--------------------------------------------------\n","Run  3\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.07538586956521741\n","Iteration: 2\n","Best (GWO + SSA (Random)): 0.04105978260869566\n","Iteration: 3\n","Best (GWO + SSA (Random)): 0.04105978260869566\n","Iteration: 4\n","Best (GWO + SSA (Random)): 0.04105978260869566\n","Iteration: 5\n","Best (GWO + SSA (Random)): 0.0386304347826087\n","Iteration: 6\n","Best (GWO + SSA (Random)): 0.0386304347826087\n","Iteration: 7\n","Best (GWO + SSA (Random)): 0.0386304347826087\n","Iteration: 8\n","Best (GWO + SSA (Random)): 0.0386304347826087\n","Iteration: 9\n","Best (GWO + SSA (Random)): 0.03432608695652173\n","Iteration: 10\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 11\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 12\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 13\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 14\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 15\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 16\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 17\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 18\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 19\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 20\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","SF [ 3  5  6  7 15]\n","Accuracy: 96.97463768115944\n","Feature Size: 5\n","Fitness 0.03307608695652174\n","--------------------------------------------------\n","Run  4\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.06059782608695653\n","Iteration: 2\n","Best (GWO + SSA (Random)): 0.04543478260869566\n","Iteration: 3\n","Best (GWO + SSA (Random)): 0.04543478260869566\n","Iteration: 4\n","Best (GWO + SSA (Random)): 0.04543478260869566\n","Iteration: 5\n","Best (GWO + SSA (Random)): 0.04543478260869566\n","Iteration: 6\n","Best (GWO + SSA (Random)): 0.04543478260869566\n","Iteration: 7\n","Best (GWO + SSA (Random)): 0.04543478260869566\n","Iteration: 8\n","Best (GWO + SSA (Random)): 0.0398804347826087\n","Iteration: 9\n","Best (GWO + SSA (Random)): 0.0398804347826087\n","Iteration: 10\n","Best (GWO + SSA (Random)): 0.0398804347826087\n","Iteration: 11\n","Best (GWO + SSA (Random)): 0.0398804347826087\n","Iteration: 12\n","Best (GWO + SSA (Random)): 0.03432608695652173\n","Iteration: 13\n","Best (GWO + SSA (Random)): 0.03432608695652173\n","Iteration: 14\n","Best (GWO + SSA (Random)): 0.03432608695652173\n","Iteration: 15\n","Best (GWO + SSA (Random)): 0.03432608695652173\n","Iteration: 16\n","Best (GWO + SSA (Random)): 0.03432608695652173\n","Iteration: 17\n","Best (GWO + SSA (Random)): 0.03432608695652173\n","Iteration: 18\n","Best (GWO + SSA (Random)): 0.03432608695652173\n","Iteration: 19\n","Best (GWO + SSA (Random)): 0.03432608695652173\n","Iteration: 20\n","Best (GWO + SSA (Random)): 0.03432608695652173\n","SF [ 3  4  6 10 11 13 15]\n","Accuracy: 96.97463768115944\n","Feature Size: 7\n","Fitness 0.03432608695652173\n","--------------------------------------------------\n","Run  5\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.0462554347826087\n","Iteration: 2\n","Best (GWO + SSA (Random)): 0.0462554347826087\n","Iteration: 3\n","Best (GWO + SSA (Random)): 0.0462554347826087\n","Iteration: 4\n","Best (GWO + SSA (Random)): 0.0462554347826087\n","Iteration: 5\n","Best (GWO + SSA (Random)): 0.0462554347826087\n","Iteration: 6\n","Best (GWO + SSA (Random)): 0.0462554347826087\n","Iteration: 7\n","Best (GWO + SSA (Random)): 0.0462554347826087\n","Iteration: 8\n","Best (GWO + SSA (Random)): 0.0462554347826087\n","Iteration: 9\n","Best (GWO + SSA (Random)): 0.0462554347826087\n","Iteration: 10\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 11\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 12\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 13\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 14\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 15\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 16\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 17\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 18\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 19\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 20\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","SF [ 3  6 10 14]\n","Accuracy: 96.97463768115944\n","Feature Size: 4\n","Fitness 0.03245108695652174\n","--------------------------------------------------\n","Run  6\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.08999456521739133\n","Iteration: 2\n","Best (GWO + SSA (Random)): 0.07108152173913045\n","Iteration: 3\n","Best (GWO + SSA (Random)): 0.07108152173913045\n","Iteration: 4\n","Best (GWO + SSA (Random)): 0.07108152173913045\n","Iteration: 5\n","Best (GWO + SSA (Random)): 0.06534782608695652\n","Iteration: 6\n","Best (GWO + SSA (Random)): 0.06122282608695654\n","Iteration: 7\n","Best (GWO + SSA (Random)): 0.05611413043478262\n","Iteration: 8\n","Best (GWO + SSA (Random)): 0.04786413043478262\n","Iteration: 9\n","Best (GWO + SSA (Random)): 0.04786413043478262\n","Iteration: 10\n","Best (GWO + SSA (Random)): 0.04786413043478262\n","Iteration: 11\n","Best (GWO + SSA (Random)): 0.04786413043478262\n","Iteration: 12\n","Best (GWO + SSA (Random)): 0.0380054347826087\n","Iteration: 13\n","Best (GWO + SSA (Random)): 0.0380054347826087\n","Iteration: 14\n","Best (GWO + SSA (Random)): 0.0380054347826087\n","Iteration: 15\n","Best (GWO + SSA (Random)): 0.0380054347826087\n","Iteration: 16\n","Best (GWO + SSA (Random)): 0.0380054347826087\n","Iteration: 17\n","Best (GWO + SSA (Random)): 0.0380054347826087\n","Iteration: 18\n","Best (GWO + SSA (Random)): 0.0380054347826087\n","Iteration: 19\n","Best (GWO + SSA (Random)): 0.0380054347826087\n","Iteration: 20\n","Best (GWO + SSA (Random)): 0.0380054347826087\n","SF [ 1  3  5  7  8 13]\n","Accuracy: 96.53985507246377\n","Feature Size: 6\n","Fitness 0.0380054347826087\n","--------------------------------------------------\n","Run  7\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.04768478260869566\n","Iteration: 2\n","Best (GWO + SSA (Random)): 0.04768478260869566\n","Iteration: 3\n","Best (GWO + SSA (Random)): 0.04768478260869566\n","Iteration: 4\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 5\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 6\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 7\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 8\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 9\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 10\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 11\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 12\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 13\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 14\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 15\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 16\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 17\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 18\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 19\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 20\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","SF [ 3  5  8  9 10 14 15]\n","Accuracy: 97.40942028985508\n","Feature Size: 7\n","Fitness 0.030021739130434776\n","--------------------------------------------------\n","Run  8\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.04168478260869566\n","Iteration: 2\n","Best (GWO + SSA (Random)): 0.0386304347826087\n","Iteration: 3\n","Best (GWO + SSA (Random)): 0.0386304347826087\n","Iteration: 4\n","Best (GWO + SSA (Random)): 0.0386304347826087\n","Iteration: 5\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 6\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 7\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 8\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 9\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 10\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 11\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 12\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 13\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 14\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 15\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 16\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 17\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 18\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 19\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","Iteration: 20\n","Best (GWO + SSA (Random)): 0.030021739130434776\n","SF [ 3  5  7  9 11 14 15]\n","Accuracy: 97.40942028985508\n","Feature Size: 7\n","Fitness 0.030021739130434776\n","--------------------------------------------------\n","Run  9\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.03432608695652174\n","Iteration: 2\n","Best (GWO + SSA (Random)): 0.03432608695652174\n","Iteration: 3\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 4\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 5\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 6\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 7\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 8\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 9\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 10\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 11\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 12\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 13\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 14\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 15\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 16\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 17\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 18\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 19\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 20\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","SF [ 3  4  5 11]\n","Accuracy: 96.97463768115944\n","Feature Size: 4\n","Fitness 0.03245108695652174\n","--------------------------------------------------\n","Run  10\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.06122282608695653\n","Iteration: 2\n","Best (GWO + SSA (Random)): 0.06122282608695653\n","Iteration: 3\n","Best (GWO + SSA (Random)): 0.04355978260869566\n","Iteration: 4\n","Best (GWO + SSA (Random)): 0.04355978260869566\n","Iteration: 5\n","Best (GWO + SSA (Random)): 0.04355978260869566\n","Iteration: 6\n","Best (GWO + SSA (Random)): 0.04355978260869566\n","Iteration: 7\n","Best (GWO + SSA (Random)): 0.03800543478260871\n","Iteration: 8\n","Best (GWO + SSA (Random)): 0.03800543478260871\n","Iteration: 9\n","Best (GWO + SSA (Random)): 0.03432608695652174\n","Iteration: 10\n","Best (GWO + SSA (Random)): 0.03432608695652174\n","Iteration: 11\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 12\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 13\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 14\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 15\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 16\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 17\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 18\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 19\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 20\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","SF [ 3  7  9 13 14]\n","Accuracy: 96.97463768115944\n","Feature Size: 5\n","Fitness 0.03307608695652174\n","--------------------------------------------------\n","Run  11\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.05584782608695653\n","Iteration: 2\n","Best (GWO + SSA (Random)): 0.05584782608695653\n","Iteration: 3\n","Best (GWO + SSA (Random)): 0.05584782608695653\n","Iteration: 4\n","Best (GWO + SSA (Random)): 0.05584782608695653\n","Iteration: 5\n","Best (GWO + SSA (Random)): 0.05584782608695653\n","Iteration: 6\n","Best (GWO + SSA (Random)): 0.05584782608695653\n","Iteration: 7\n","Best (GWO + SSA (Random)): 0.05584782608695653\n","Iteration: 8\n","Best (GWO + SSA (Random)): 0.05584782608695653\n","Iteration: 9\n","Best (GWO + SSA (Random)): 0.05584782608695653\n","Iteration: 10\n","Best (GWO + SSA (Random)): 0.05584782608695653\n","Iteration: 11\n","Best (GWO + SSA (Random)): 0.05584782608695653\n","Iteration: 12\n","Best (GWO + SSA (Random)): 0.05584782608695653\n","Iteration: 13\n","Best (GWO + SSA (Random)): 0.05584782608695653\n","Iteration: 14\n","Best (GWO + SSA (Random)): 0.05584782608695653\n","Iteration: 15\n","Best (GWO + SSA (Random)): 0.05584782608695653\n","Iteration: 16\n","Best (GWO + SSA (Random)): 0.05584782608695653\n","Iteration: 17\n","Best (GWO + SSA (Random)): 0.052168478260869566\n","Iteration: 18\n","Best (GWO + SSA (Random)): 0.052168478260869566\n","Iteration: 19\n","Best (GWO + SSA (Random)): 0.052168478260869566\n","Iteration: 20\n","Best (GWO + SSA (Random)): 0.052168478260869566\n","SF [ 1  2  3  4  8 10 13 15]\n","Accuracy: 95.23550724637681\n","Feature Size: 8\n","Fitness 0.052168478260869566\n","--------------------------------------------------\n","Run  12\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.11994565217391306\n","Iteration: 2\n","Best (GWO + SSA (Random)): 0.08506521739130436\n","Iteration: 3\n","Best (GWO + SSA (Random)): 0.08506521739130436\n","Iteration: 4\n","Best (GWO + SSA (Random)): 0.08013586956521741\n","Iteration: 5\n","Best (GWO + SSA (Random)): 0.0709021739130435\n","Iteration: 6\n","Best (GWO + SSA (Random)): 0.06490217391304348\n","Iteration: 7\n","Best (GWO + SSA (Random)): 0.06490217391304348\n","Iteration: 8\n","Best (GWO + SSA (Random)): 0.06490217391304348\n","Iteration: 9\n","Best (GWO + SSA (Random)): 0.06490217391304348\n","Iteration: 10\n","Best (GWO + SSA (Random)): 0.051989130434782635\n","Iteration: 11\n","Best (GWO + SSA (Random)): 0.051989130434782635\n","Iteration: 12\n","Best (GWO + SSA (Random)): 0.046059782608695664\n","Iteration: 13\n","Best (GWO + SSA (Random)): 0.046059782608695664\n","Iteration: 14\n","Best (GWO + SSA (Random)): 0.046059782608695664\n","Iteration: 15\n","Best (GWO + SSA (Random)): 0.03925543478260871\n","Iteration: 16\n","Best (GWO + SSA (Random)): 0.03925543478260871\n","Iteration: 17\n","Best (GWO + SSA (Random)): 0.03925543478260871\n","Iteration: 18\n","Best (GWO + SSA (Random)): 0.03495108695652174\n","Iteration: 19\n","Best (GWO + SSA (Random)): 0.03495108695652174\n","Iteration: 20\n","Best (GWO + SSA (Random)): 0.03495108695652174\n","SF [ 3  4  5  6 12 13 14 15]\n","Accuracy: 96.97463768115944\n","Feature Size: 8\n","Fitness 0.03495108695652174\n","--------------------------------------------------\n","Run  13\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.08444021739130436\n","Iteration: 2\n","Best (GWO + SSA (Random)): 0.0411304347826087\n","Iteration: 3\n","Best (GWO + SSA (Random)): 0.0411304347826087\n","Iteration: 4\n","Best (GWO + SSA (Random)): 0.0411304347826087\n","Iteration: 5\n","Best (GWO + SSA (Random)): 0.0411304347826087\n","Iteration: 6\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 7\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 8\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 9\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 10\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 11\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 12\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 13\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 14\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 15\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 16\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 17\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 18\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 19\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 20\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","SF [ 3  4  6  8 13]\n","Accuracy: 96.97463768115944\n","Feature Size: 5\n","Fitness 0.03307608695652174\n","--------------------------------------------------\n","Run  14\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.06534782608695654\n","Iteration: 2\n","Best (GWO + SSA (Random)): 0.06534782608695654\n","Iteration: 3\n","Best (GWO + SSA (Random)): 0.06534782608695654\n","Iteration: 4\n","Best (GWO + SSA (Random)): 0.05673913043478263\n","Iteration: 5\n","Best (GWO + SSA (Random)): 0.05673913043478263\n","Iteration: 6\n","Best (GWO + SSA (Random)): 0.05611413043478263\n","Iteration: 7\n","Best (GWO + SSA (Random)): 0.05459782608695653\n","Iteration: 8\n","Best (GWO + SSA (Random)): 0.05459782608695653\n","Iteration: 9\n","Best (GWO + SSA (Random)): 0.05459782608695653\n","Iteration: 10\n","Best (GWO + SSA (Random)): 0.05459782608695653\n","Iteration: 11\n","Best (GWO + SSA (Random)): 0.05459782608695653\n","Iteration: 12\n","Best (GWO + SSA (Random)): 0.05459782608695653\n","Iteration: 13\n","Best (GWO + SSA (Random)): 0.05459782608695653\n","Iteration: 14\n","Best (GWO + SSA (Random)): 0.05459782608695653\n","Iteration: 15\n","Best (GWO + SSA (Random)): 0.041059782608695646\n","Iteration: 16\n","Best (GWO + SSA (Random)): 0.041059782608695646\n","Iteration: 17\n","Best (GWO + SSA (Random)): 0.041059782608695646\n","Iteration: 18\n","Best (GWO + SSA (Random)): 0.041059782608695646\n","Iteration: 19\n","Best (GWO + SSA (Random)): 0.041059782608695646\n","Iteration: 20\n","Best (GWO + SSA (Random)): 0.041059782608695646\n","SF [ 2  3  7 15]\n","Accuracy: 96.10507246376812\n","Feature Size: 4\n","Fitness 0.041059782608695646\n","--------------------------------------------------\n","Run  15\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.07951086956521741\n","Iteration: 2\n","Best (GWO + SSA (Random)): 0.07538586956521741\n","Iteration: 3\n","Best (GWO + SSA (Random)): 0.07538586956521741\n","Iteration: 4\n","Best (GWO + SSA (Random)): 0.07538586956521741\n","Iteration: 5\n","Best (GWO + SSA (Random)): 0.07538586956521741\n","Iteration: 6\n","Best (GWO + SSA (Random)): 0.07538586956521741\n","Iteration: 7\n","Best (GWO + SSA (Random)): 0.07233152173913045\n","Iteration: 8\n","Best (GWO + SSA (Random)): 0.06802717391304348\n","Iteration: 9\n","Best (GWO + SSA (Random)): 0.06802717391304348\n","Iteration: 10\n","Best (GWO + SSA (Random)): 0.06802717391304348\n","Iteration: 11\n","Best (GWO + SSA (Random)): 0.062472826086956534\n","Iteration: 12\n","Best (GWO + SSA (Random)): 0.062472826086956534\n","Iteration: 13\n","Best (GWO + SSA (Random)): 0.062472826086956534\n","Iteration: 14\n","Best (GWO + SSA (Random)): 0.062472826086956534\n","Iteration: 15\n","Best (GWO + SSA (Random)): 0.062472826086956534\n","Iteration: 16\n","Best (GWO + SSA (Random)): 0.062472826086956534\n","Iteration: 17\n","Best (GWO + SSA (Random)): 0.062472826086956534\n","Iteration: 18\n","Best (GWO + SSA (Random)): 0.062472826086956534\n","Iteration: 19\n","Best (GWO + SSA (Random)): 0.062472826086956534\n","Iteration: 20\n","Best (GWO + SSA (Random)): 0.062472826086956534\n","SF [ 1  2  3  4  7  8 10 11 13 14 15]\n","Accuracy: 94.38405797101449\n","Feature Size: 11\n","Fitness 0.062472826086956534\n","--------------------------------------------------\n","Run  16\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.08256521739130435\n","Iteration: 2\n","Best (GWO + SSA (Random)): 0.06122282608695654\n","Iteration: 3\n","Best (GWO + SSA (Random)): 0.052614130434782615\n","Iteration: 4\n","Best (GWO + SSA (Random)): 0.0519891304347826\n","Iteration: 5\n","Best (GWO + SSA (Random)): 0.0519891304347826\n","Iteration: 6\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 7\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 8\n","Best (GWO + SSA (Random)): 0.029396739130434776\n","Iteration: 9\n","Best (GWO + SSA (Random)): 0.029396739130434776\n","Iteration: 10\n","Best (GWO + SSA (Random)): 0.029396739130434776\n","Iteration: 11\n","Best (GWO + SSA (Random)): 0.029396739130434776\n","Iteration: 12\n","Best (GWO + SSA (Random)): 0.029396739130434776\n","Iteration: 13\n","Best (GWO + SSA (Random)): 0.029396739130434776\n","Iteration: 14\n","Best (GWO + SSA (Random)): 0.029396739130434776\n","Iteration: 15\n","Best (GWO + SSA (Random)): 0.029396739130434776\n","Iteration: 16\n","Best (GWO + SSA (Random)): 0.029396739130434776\n","Iteration: 17\n","Best (GWO + SSA (Random)): 0.029396739130434776\n","Iteration: 18\n","Best (GWO + SSA (Random)): 0.029396739130434776\n","Iteration: 19\n","Best (GWO + SSA (Random)): 0.029396739130434776\n","Iteration: 20\n","Best (GWO + SSA (Random)): 0.029396739130434776\n","SF [ 3  5  7  9 11 14]\n","Accuracy: 97.40942028985508\n","Feature Size: 6\n","Fitness 0.029396739130434776\n","--------------------------------------------------\n","Run  17\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.04643478260869566\n","Iteration: 2\n","Best (GWO + SSA (Random)): 0.04643478260869566\n","Iteration: 3\n","Best (GWO + SSA (Random)): 0.04643478260869566\n","Iteration: 4\n","Best (GWO + SSA (Random)): 0.0398804347826087\n","Iteration: 5\n","Best (GWO + SSA (Random)): 0.0398804347826087\n","Iteration: 6\n","Best (GWO + SSA (Random)): 0.03495108695652174\n","Iteration: 7\n","Best (GWO + SSA (Random)): 0.03495108695652174\n","Iteration: 8\n","Best (GWO + SSA (Random)): 0.03432608695652174\n","Iteration: 9\n","Best (GWO + SSA (Random)): 0.03432608695652174\n","Iteration: 10\n","Best (GWO + SSA (Random)): 0.03432608695652174\n","Iteration: 11\n","Best (GWO + SSA (Random)): 0.03432608695652174\n","Iteration: 12\n","Best (GWO + SSA (Random)): 0.03432608695652174\n","Iteration: 13\n","Best (GWO + SSA (Random)): 0.03432608695652174\n","Iteration: 14\n","Best (GWO + SSA (Random)): 0.03432608695652174\n","Iteration: 15\n","Best (GWO + SSA (Random)): 0.03432608695652174\n","Iteration: 16\n","Best (GWO + SSA (Random)): 0.03432608695652174\n","Iteration: 17\n","Best (GWO + SSA (Random)): 0.03432608695652174\n","Iteration: 18\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 19\n","Best (GWO + SSA (Random)): 0.03370108695652174\n","Iteration: 20\n","Best (GWO + SSA (Random)): 0.029396739130434776\n","SF [ 3  5  9 10 11 12]\n","Accuracy: 97.40942028985508\n","Feature Size: 6\n","Fitness 0.029396739130434776\n","--------------------------------------------------\n","Run  18\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.03245108695652174\n","Iteration: 2\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 3\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 4\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 5\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 6\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 7\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 8\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 9\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 10\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 11\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 12\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 13\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 14\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 15\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 16\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 17\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 18\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 19\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 20\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","SF [3 5 6 9]\n","Accuracy: 96.97463768115944\n","Feature Size: 4\n","Fitness 0.03245108695652174\n","--------------------------------------------------\n","Run  19\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.07583152173913046\n","Iteration: 2\n","Best (GWO + SSA (Random)): 0.06740217391304348\n","Iteration: 3\n","Best (GWO + SSA (Random)): 0.05136413043478262\n","Iteration: 4\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 5\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 6\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 7\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 8\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 9\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 10\n","Best (GWO + SSA (Random)): 0.03245108695652174\n","Iteration: 11\n","Best (GWO + SSA (Random)): 0.03182608695652174\n","Iteration: 12\n","Best (GWO + SSA (Random)): 0.03182608695652174\n","Iteration: 13\n","Best (GWO + SSA (Random)): 0.03182608695652174\n","Iteration: 14\n","Best (GWO + SSA (Random)): 0.03182608695652174\n","Iteration: 15\n","Best (GWO + SSA (Random)): 0.03182608695652174\n","Iteration: 16\n","Best (GWO + SSA (Random)): 0.03182608695652174\n","Iteration: 17\n","Best (GWO + SSA (Random)): 0.03182608695652174\n","Iteration: 18\n","Best (GWO + SSA (Random)): 0.03182608695652174\n","Iteration: 19\n","Best (GWO + SSA (Random)): 0.03182608695652174\n","Iteration: 20\n","Best (GWO + SSA (Random)): 0.03182608695652174\n","SF [ 3  4 13]\n","Accuracy: 96.97463768115944\n","Feature Size: 3\n","Fitness 0.03182608695652174\n","--------------------------------------------------\n","Run  20\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.03432608695652173\n","Iteration: 2\n","Best (GWO + SSA (Random)): 0.03432608695652173\n","Iteration: 3\n","Best (GWO + SSA (Random)): 0.03432608695652173\n","Iteration: 4\n","Best (GWO + SSA (Random)): 0.03432608695652173\n","Iteration: 5\n","Best (GWO + SSA (Random)): 0.03432608695652173\n","Iteration: 6\n","Best (GWO + SSA (Random)): 0.03370108695652173\n","Iteration: 7\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 8\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 9\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 10\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 11\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 12\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 13\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 14\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 15\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 16\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 17\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 18\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 19\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","Iteration: 20\n","Best (GWO + SSA (Random)): 0.03307608695652174\n","SF [ 3  4  6  8 13]\n","Accuracy: 96.97463768115944\n","Feature Size: 5\n","Fitness 0.03307608695652174\n","--------------------------------------------------\n"]}],"source":["acc_arr          = []\n","feature_size_arr = []\n","time_arr         = []\n","fitness          = []\n","run_count        = 0\n","\n","while run_count \u003c num_runs:\n","  start_time = time.time()\n","  run_count += 1\n","  print(\"Run \", run_count)\n","  print(\"-----------------------------------\")\n","  fmdl = gwo_ssa_random(features, target, opts)\n","  sf   = fmdl['sf']\n","  \n","  if sf.size == 0:\n","    sf = np.arange(dim)\n","    \n","  print(\"SF\", sf)\n","\n","  kf = KFold(n_splits=cv, shuffle=True, random_state=2)\n","\n","  total_Acc = 0\n","\n","  for train_index, test_index in kf.split(features):\n","    X_train, X_test = features[train_index], features[test_index]\n","    y_train, y_test = target[train_index], target[test_index]\n","\n","    # Number of instances\n","    num_train = np.size(X_train, 0)\n","    num_test  = np.size(X_test, 0)\n","    \n","    # Define selected features\n","    xtrain = X_train[:, sf]\n","    ytrain = y_train.reshape(num_train)\n","    xtest  = X_test[:, sf]\n","    ytest  = y_test.reshape(num_test)\n","\n","    # Training\n","    knn = KNeighborsClassifier(n_neighbors=k)\n","    knn.fit(xtrain, ytrain)\n","\n","    # Prediction\n","    ypred = knn.predict(xtest)\n","    acc   = np.sum(ytest == ypred) / num_test\n","\n","    total_Acc = total_Acc + acc\n","\n","  time_arr.append(time.time() - start_time)\n","\n","  Accuracy = 100 * (total_Acc/cv)\n","  print(\"Accuracy:\", Accuracy)\n","  acc_arr.append(Accuracy)\n","\n","  num_feat = fmdl['nf']\n","  print(\"Feature Size:\", num_feat)\n","  feature_size_arr.append(num_feat)\n","\n","  fitt = fmdl['c'][0].min()\n","  print(\"Fitness\", fitt)\n","  fitness.append(fitt)\n","  print(\"--------------------------------------------------\")"]},{"cell_type":"code","execution_count":44,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":32,"status":"ok","timestamp":1651555902186,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"},"user_tz":-330},"id":"lAE2cuZ-BIg1"},"outputs":[{"name":"stdout","output_type":"stream","text":["Average Accuracy:  96.67210144927537\n","Average fitness:  0.03663369565217391\n","Average number of features selected:  5.9\n","Average time taken:  2.103010618686676 seconds\n"]}],"source":["print(\"Average Accuracy: \", np.mean(acc_arr))\n","print(\"Average fitness: \", np.mean(fitness))\n","print(\"Average number of features selected: \", np.mean(feature_size_arr))\n","print(\"Average time taken: \", np.mean(time_arr), \"seconds\")"]}],"metadata":{"colab":{"collapsed_sections":[],"name":"FS - IGWO+SSA (Random Switcher)","provenance":[{"file_id":"1Y9lONYGlYKNAKRu7Vtx_F4_kRLKwO85X","timestamp":1644342920042},{"file_id":"1sLs09JI33D9XUh-hgDzX6SVn7UXJNl70","timestamp":1644248848004}],"version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}
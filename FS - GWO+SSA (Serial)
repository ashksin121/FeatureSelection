{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"FS - GWO+SSA (Serial)","provenance":[{"file_id":"1Y9lONYGlYKNAKRu7Vtx_F4_kRLKwO85X","timestamp":1650042182000},{"file_id":"1sLs09JI33D9XUh-hgDzX6SVn7UXJNl70","timestamp":1644248848004}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"EJtX5aaVFKgS","executionInfo":{"status":"ok","timestamp":1651546561912,"user_tz":-330,"elapsed":812,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"}}},"source":["import numpy as np\n","import pandas as pd\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.model_selection import KFold\n","from numpy.random import rand\n","from sklearn.neighbors import KNeighborsClassifier\n","import matplotlib.pyplot as plt\n","import time"],"execution_count":133,"outputs":[]},{"cell_type":"code","metadata":{"id":"gbX696WXAslG","executionInfo":{"status":"ok","timestamp":1651546561913,"user_tz":-330,"elapsed":15,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"}}},"source":["def error_rate(features, target, x, opts):\n","    # parameters\n","    k     = opts['k']\n","    cv    = opts['cv']\n","\n","    kf = KFold(n_splits=cv, shuffle=True, random_state=2)\n","\n","    total_error = 0\n","\n","    for train_index, test_index in kf.split(features):\n","      X_train, X_test = features[train_index], features[test_index]\n","      y_train, y_test = target[train_index], target[test_index]\n","\n","      # Number of instances\n","      num_train = np.size(X_train, 0)\n","      num_test  = np.size(X_test, 0)\n","      \n","      # Define selected features\n","      xtrain = X_train[:, x==1]\n","      ytrain = y_train.reshape(num_train)\n","      xtest  = X_test[:, x==1]\n","      ytest  = y_test.reshape(num_test)\n","\n","      # Training\n","      knn = KNeighborsClassifier(n_neighbors=k)\n","      knn.fit(xtrain, ytrain)\n","\n","      # Prediction\n","      ypred = knn.predict(xtest)\n","      acc   = np.sum(ytest == ypred) / num_test\n","      error = 1 - acc\n","\n","      total_error = total_error + error\n","      \n","    return total_error/cv"],"execution_count":134,"outputs":[]},{"cell_type":"code","metadata":{"id":"36YgnDeM_mTW","executionInfo":{"status":"ok","timestamp":1651546561913,"user_tz":-330,"elapsed":14,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"}}},"source":["def Fun(features, target, x, opts):\n","    # Parameters\n","    alpha    = 0.99\n","    beta     = 1 - alpha\n","    # Original feature size\n","    max_feat = len(x)\n","    # Number of selected features\n","    num_feat = np.sum(x == 1)\n","    # Solve if no feature selected\n","    if num_feat == 0:\n","        cost  = 1\n","    else:\n","        # Get error rate\n","        error = error_rate(features, target, x, opts)\n","        # Objective function\n","        cost  = alpha * error + beta * (num_feat / max_feat)\n","        \n","    return cost"],"execution_count":135,"outputs":[]},{"cell_type":"code","metadata":{"id":"UIIs5LfF_zD9","executionInfo":{"status":"ok","timestamp":1651546561913,"user_tz":-330,"elapsed":12,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"}}},"source":["def init_position(lb, ub, N, dim):\n","    X = np.zeros([N, dim], dtype='float')\n","    R = rand()\n","    u = 1 + R\n","    for d in range(dim):\n","        X[0,d] = lb[0,d] + (ub[0,d] - lb[0,d]) * rand()\n","    for i in range(1, N):\n","        for d in range(dim):\n","            if X[i-1,d] <= 0.5:\n","                X[i,d] = u * X[i-1,d]\n","            else:\n","                X[i,d] = u * (1 - X[i-1,d])\n","    \n","    return X"],"execution_count":136,"outputs":[]},{"cell_type":"code","metadata":{"id":"Q2GwviAx_6cG","executionInfo":{"status":"ok","timestamp":1651546561914,"user_tz":-330,"elapsed":12,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"}}},"source":["def binary_conversion(X, thres, N, dim):\n","    Xbin = np.zeros([N, dim], dtype='int')\n","    for i in range(N):\n","        for d in range(dim):\n","            # xi = 1/(1 + np.exp(-X[i,d]))\n","            # if xi > rand():\n","            if X[i,d] > 0.5:\n","                Xbin[i,d] = 0\n","            else:\n","                Xbin[i,d] = 1\n","    \n","    return Xbin"],"execution_count":137,"outputs":[]},{"cell_type":"code","metadata":{"id":"D1GVeQ3j_-Ue","executionInfo":{"status":"ok","timestamp":1651546561915,"user_tz":-330,"elapsed":12,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"}}},"source":["def boundary(x, lb, ub):\n","    if x < lb:\n","        x = lb\n","    if x > ub:\n","        x = ub\n","    \n","    return x"],"execution_count":138,"outputs":[]},{"cell_type":"code","metadata":{"id":"KcfLyiqKADkB","executionInfo":{"status":"ok","timestamp":1651546562681,"user_tz":-330,"elapsed":777,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"}}},"source":["def gwo_ssa_serial(features, target, opts):\n","    # Parameters\n","    ub    = 1\n","    lb    = 0\n","    thres = rand()    # NEED TO CHANGE\n","\n","    C1 = 2\n","    C2 = 2\n","\n","    N        = opts['N']\n","    max_iter = opts['T']\n","    if 'w' in opts:\n","        w    = opts['w']\n","    if 'c1' in opts:\n","        c1   = opts['c1']\n","    if 'c2' in opts:\n","        c2   = opts['c2'] \n","    \n","    # Dimension\n","    dim = np.size(features, 1)\n","    if np.size(lb) == 1:\n","        ub = ub * np.ones([1, dim], dtype='float')\n","        lb = lb * np.ones([1, dim], dtype='float')\n","        \n","    # Initialize position\n","    X     = init_position(lb, ub, N, dim)\n","\n","    # Binary conversion\n","    Xbin  = binary_conversion(X, thres, N, dim)\n","\n","    # Fitness at first iteration\n","    fit    = np.zeros([N, 1], dtype='float')\n","    Xalpha = np.zeros([1, dim], dtype='float')\n","    Xbeta  = np.zeros([1, dim], dtype='float')\n","    Xdelta = np.zeros([1, dim], dtype='float')\n","    Falpha = float('inf')\n","    Fbeta  = float('inf')\n","    Fdelta = float('inf')\n","\n","    #################################################\n","    ########## GWO ##################################\n","    #################################################\n","\n","    for i in range(N):\n","      fit[i,0] = Fun(features, target, Xbin[i,:], opts)\n","      if fit[i,0] < Falpha:\n","        Xalpha[0,:] = X[i,:]\n","        Falpha      = fit[i,0]\n","\n","      if fit[i,0] < Fbeta and fit[i,0] > Falpha:\n","        Xbeta[0,:]  = X[i,:]\n","        beta       = fit[i,0]\n","            \n","      if fit[i,0] < Fdelta and fit[i,0] > Fbeta and fit[i,0] > Falpha:\n","        Xdelta[0,:] = X[i,:]\n","        Fdelta      = fit[i,0]\n","\n","    # Pre\n","    curve = np.zeros([1, max_iter], dtype='float')\n","    t     = 0\n","\n","    curve[0,t] = Falpha.copy()\n","    print(\"Iteration:\", t + 1)\n","    print(\"Best (GWO):\", curve[0,t])\n","    t += 1\n","    \n","    while t < max_iter:\n","        # Coefficient decreases linearly from 2 to 0 \n","        a = 2 - t * (2 / max_iter)\n","        \n","        for i in range(N):\n","            for d in range(dim):\n","                # Random values\n","                r1     = rand()\n","                r2     = rand()\n","                # Parameter C (3.4)\n","                C1     = 2 * rand()\n","                C2     = 2 * rand()\n","                C3     = 2 * rand()\n","                # Compute Dalpha, Dbeta & Ddelta (3.5)\n","                Dalpha = abs(C1 * Xalpha[0,d] - X[i,d]) \n","                Dbeta  = abs(C2 * Xbeta[0,d] - X[i,d])\n","                Ddelta = abs(C3 * Xdelta[0,d] - X[i,d])\n","                # Parameter A (3.3)\n","                A1     = 2 * a * rand() - a\n","                A2     = 2 * a * rand() - a\n","                A3     = 2 * a * rand() - a\n","                # Compute X1, X2 & X3 (3.6) \n","                X1     = Xalpha[0,d] - A1 * Dalpha\n","                X2     = Xbeta[0,d] - A2 * Dbeta\n","                X3     = Xdelta[0,d] - A3 * Ddelta\n","                # Update wolf (3.7)\n","                X[i,d] = (X1 + X2 + X3) / 3                \n","                # Boundary\n","                X[i,d] = boundary(X[i,d], lb[0,d], ub[0,d])\n","\n","        # Binary conversion\n","        Xbin  = binary_conversion(X, thres, N, dim)\n","        \n","        # Fitness\n","        for i in range(N):\n","            fit[i,0] = Fun(features, target, Xbin[i,:], opts)\n","            if fit[i,0] < Falpha:\n","                Xalpha[0,:] = X[i,:]\n","                Falpha      = fit[i,0]\n","                \n","            if fit[i,0] < Fbeta and fit[i,0] > Falpha:\n","                Xbeta[0,:]  = X[i,:]\n","                Fbeta       = fit[i,0]\n","                \n","            if fit[i,0] < Fdelta and fit[i,0] > Fbeta and fit[i,0] > Falpha:\n","                Xdelta[0,:] = X[i,:]\n","                Fdelta      = fit[i,0]\n","    \n","        ########################################################################\n","        #######################   SSA   ########################################\n","        ########################################################################\n","\n","        c1 = 2 * np.exp(-(4 * t / max_iter) ** 2)\n","        \n","        for i in range(N):          \n","            # First leader update\n","            if i == 0:  \n","                for d in range(dim):\n","                    # Coefficient c2 & c3 [0 ~ 1]\n","                    c2 = rand() \n","                    c3 = rand()\n","              \t    # Leader update (3.1)\n","                    if c3 >= 0.5: \n","                        X[i,d] = Xalpha[0,d] + c1 * ((ub[0,d] - lb[0,d]) * c2 + lb[0,d])\n","                    else:\n","                        X[i,d] = Xalpha[0,d] - c1 * ((ub[0,d] - lb[0,d]) * c2 + lb[0,d])\n","                \n","                    # Boundary\n","                    X[i,d] = boundary(X[i,d], lb[0,d], ub[0,d]) \n","                \n","            # Salp update\n","            elif i >= 1:\n","                for d in range(dim):\n","                    # Salp update by following front salp (3.4)\n","                    X[i,d] = (X[i,d] + X[i-1, d]) / 2\n","                    # Boundary\n","                    X[i,d] = boundary(X[i,d], lb[0,d], ub[0,d])\n","\n","        # Binary conversion\n","        Xbin  = binary_conversion(X, thres, N, dim)\n","        \n","        # Fitness\n","        for i in range(N):\n","            fit[i,0] = Fun(features, target, Xbin[i,:], opts)\n","            if fit[i,0] < Falpha:\n","                Xalpha[0,:] = X[i,:]\n","                Falpha      = fit[i,0]\n","                \n","            if fit[i,0] < Fbeta and fit[i,0] > Falpha:\n","                Xbeta[0,:]  = X[i,:]\n","                Fbeta       = fit[i,0]\n","                \n","            if fit[i,0] < Fdelta and fit[i,0] > Fbeta and fit[i,0] > Falpha:\n","                Xdelta[0,:] = X[i,:]\n","                Fdelta      = fit[i,0]\n","\n","        curve[0,t] = Falpha.copy()\n","        print(\"Iteration:\", t + 1)\n","        print(\"Best (GWO + SSA (Serial)):\", curve[0,t])\n","        t += 1\n","                \n","    # Best feature subset\n","    Gbin       = binary_conversion(Xalpha, thres, 1, dim) \n","    Gbin       = Gbin.reshape(dim)\n","    pos        = np.asarray(range(0, dim))    \n","    sel_index  = pos[Gbin == 1]\n","    num_feat   = len(sel_index)\n","    # Create dictionary\n","    gwo_data = {'sf': sel_index, 'c': curve, 'nf': num_feat}\n","    \n","    return gwo_data "],"execution_count":139,"outputs":[]},{"cell_type":"code","metadata":{"id":"JX1PEKlVF5ko","executionInfo":{"status":"ok","timestamp":1651546562682,"user_tz":-330,"elapsed":17,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"}}},"source":["# #####################################################################\n","# #######         WINE\n","# #####################################################################\n","\n","# column_headers = ['Type', 'Alcohol', 'Malic acid', 'Ash', 'Alcalinity of ash', 'Magnesium', 'Total phenols',\n","#                   'Flavanoids', 'Nonflavanoid phenols', 'Proanthocyanins', 'Color Intensity',\n","#                    'Hue', 'OD280/OD315 of diluted wines', 'Proline']\n","# data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data', sep=\",\", header=None)\n","# # data = data.values\n","# data.dropna(inplace=True)\n","# dataArray = data.to_numpy()\n","\n","# print(\"Data: \", data)\n","\n","# features  = np.asarray(dataArray[:, 1:])\n","# target = np.asarray(dataArray[:, 0])"],"execution_count":140,"outputs":[]},{"cell_type":"code","source":["# #####################################################################\n","# #######         BREAST CANCER\n","# #####################################################################\n","\n","# data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data', header=None)\n","# data.columns = ['Sample code', 'Clump Thickness', 'Uniformity of Cell Size', 'Uniformity of Cell Shape',\n","#                 'Marginal Adhesion', 'Single Epithelial Cell Size', 'Bare Nuclei', 'Bland Chromatin',\n","#                 'Normal Nucleoli', 'Mitoses','Class']\n","\n","# data = data.drop(['Sample code'],axis=1)\n","# # data = data.values\n","# print(data.shape[0])\n","# data = data.replace(\"?\",np.NaN)\n","# print(data.isnull().values.any())\n","# data.dropna(inplace=True)\n","# print(data.shape[0])\n","# data['Bare Nuclei'] = pd.to_numeric(data['Bare Nuclei'])\n","# dataArray = data.to_numpy()\n","\n","# print(\"Data: \", data)\n","\n","# features  = np.asarray(dataArray[:, 1:-1])\n","# target = np.asarray(dataArray[:, -1])"],"metadata":{"id":"xiPWj5t9RGR4","executionInfo":{"status":"ok","timestamp":1651546562682,"user_tz":-330,"elapsed":16,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"}}},"execution_count":141,"outputs":[]},{"cell_type":"code","source":["#####################################################################\n","#######         ZOO\n","#####################################################################\n","\n","data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/zoo/zoo.data', header=None)\n","# data = data.values\n","data = data.loc[:, data.columns != 0]\n","data = data.astype(float)\n","print(data.shape[0])\n","print(data.isnull().values.any())\n","data.dropna(inplace=True)\n","print(data.shape[0])\n","dataArray = data.to_numpy()\n","\n","print(\"Data: \", data)\n","\n","features  = np.asarray(dataArray[:, 0:-1])\n","target = np.asarray(dataArray[:, -1])"],"metadata":{"id":"XQ0hKZF4nXtF","executionInfo":{"status":"ok","timestamp":1651546562683,"user_tz":-330,"elapsed":17,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"02ffe704-62fc-4b66-9d11-9b35ee837975"},"execution_count":142,"outputs":[{"output_type":"stream","name":"stdout","text":["101\n","False\n","101\n","Data:        1    2    3    4    5    6    7    8    9    10   11   12   13   14  \\\n","0    1.0  0.0  0.0  1.0  0.0  0.0  1.0  1.0  1.0  1.0  0.0  0.0  4.0  0.0   \n","1    1.0  0.0  0.0  1.0  0.0  0.0  0.0  1.0  1.0  1.0  0.0  0.0  4.0  1.0   \n","2    0.0  0.0  1.0  0.0  0.0  1.0  1.0  1.0  1.0  0.0  0.0  1.0  0.0  1.0   \n","3    1.0  0.0  0.0  1.0  0.0  0.0  1.0  1.0  1.0  1.0  0.0  0.0  4.0  0.0   \n","4    1.0  0.0  0.0  1.0  0.0  0.0  1.0  1.0  1.0  1.0  0.0  0.0  4.0  1.0   \n","..   ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...   \n","96   1.0  0.0  0.0  1.0  0.0  0.0  0.0  1.0  1.0  1.0  0.0  0.0  2.0  1.0   \n","97   1.0  0.0  1.0  0.0  1.0  0.0  0.0  0.0  0.0  1.0  1.0  0.0  6.0  0.0   \n","98   1.0  0.0  0.0  1.0  0.0  0.0  1.0  1.0  1.0  1.0  0.0  0.0  4.0  1.0   \n","99   0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0   \n","100  0.0  1.0  1.0  0.0  1.0  0.0  0.0  0.0  1.0  1.0  0.0  0.0  2.0  1.0   \n","\n","      15   16   17  \n","0    0.0  1.0  1.0  \n","1    0.0  1.0  1.0  \n","2    0.0  0.0  4.0  \n","3    0.0  1.0  1.0  \n","4    0.0  1.0  1.0  \n","..   ...  ...  ...  \n","96   0.0  1.0  1.0  \n","97   0.0  0.0  6.0  \n","98   0.0  1.0  1.0  \n","99   0.0  0.0  7.0  \n","100  0.0  0.0  2.0  \n","\n","[101 rows x 17 columns]\n"]}]},{"cell_type":"code","source":["# #####################################################################\n","# #######         SONAR\n","# #####################################################################\n","\n","# data = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/undocumented/connectionist-bench/sonar/sonar.all-data', header=None)\n","# # data = data.values\n","# mymap = {'R': 1, 'M': 2}\n","# data = data.applymap(lambda s: mymap.get(s) if s in mymap else s)\n","\n","# print(data.shape[0])\n","# print(data.isnull().values.any())\n","# data.dropna(inplace=True)\n","# print(data.shape[0])\n","# dataArray = data.to_numpy()\n","\n","# print(\"Data: \", data)\n","\n","# features  = np.asarray(dataArray[:, 0:-1])\n","# target = np.asarray(dataArray[:, -1])"],"metadata":{"id":"tf-4nSf5h4iS","executionInfo":{"status":"ok","timestamp":1651546562683,"user_tz":-330,"elapsed":14,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"}}},"execution_count":143,"outputs":[]},{"cell_type":"code","source":["# #####################################################################\n","# #######         LYMPHOGRAPHY\n","# #####################################################################\n","\n","# data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/lymphography/lymphography.data', header=None)\n","# # data = data.values\n","\n","# print(data.shape[0])\n","# print(data.isnull().values.any())\n","# data.dropna(inplace=True)\n","# print(data.shape[0])\n","# dataArray = data.to_numpy()\n","\n","# print(\"Data: \", data)\n","\n","# features  = np.asarray(dataArray[:, 1:])\n","# target = np.asarray(dataArray[:, 0])"],"metadata":{"id":"1NtUtvutjYfY","executionInfo":{"status":"ok","timestamp":1651546562683,"user_tz":-330,"elapsed":13,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"}}},"execution_count":144,"outputs":[]},{"cell_type":"code","source":["# #####################################################################\n","# #######         CONGRESS\n","# #####################################################################\n","\n","# data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/voting-records/house-votes-84.data', header=None)\n","# # data = data.values\n","# mymap = {'n': 0, 'y': 1, 'democrat': 1, 'republican': 2}\n","# data = data.applymap(lambda s: mymap.get(s) if s in mymap else s)\n","\n","# print(data.shape[0])\n","# data = data.replace(\"?\",np.NaN)\n","# print(data.isnull().values.any())\n","# data.dropna(inplace=True)\n","# print(data.shape[0])\n","# dataArray = data.to_numpy()\n","\n","# print(\"Data: \", data)\n","\n","# features  = np.asarray(dataArray[:, 1:])\n","# target = np.asarray(dataArray[:, 0])"],"metadata":{"id":"PQiQq0wsm-uO","executionInfo":{"status":"ok","timestamp":1651546562684,"user_tz":-330,"elapsed":14,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"}}},"execution_count":145,"outputs":[]},{"cell_type":"code","source":["# #####################################################################\n","# #######         IONOSPHERE\n","# #####################################################################\n","\n","# data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/ionosphere/ionosphere.data', header=None)\n","# # data = data.values\n","# mymap = {'g': 1, 'b': 2}\n","# data = data.applymap(lambda s: mymap.get(s) if s in mymap else s)\n","\n","# print(data.shape[0])\n","# data = data.replace(\"?\",np.NaN)\n","# print(data.isnull().values.any())\n","# data.dropna(inplace=True)\n","# print(data.shape[0])\n","# dataArray = data.to_numpy()\n","\n","# print(\"Data: \", data)\n","\n","# features  = np.asarray(dataArray[:, 0:-1])\n","# target = np.asarray(dataArray[:, -1])"],"metadata":{"id":"UmD-ph5AqVvf","executionInfo":{"status":"ok","timestamp":1651546562684,"user_tz":-330,"elapsed":13,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"}}},"execution_count":146,"outputs":[]},{"cell_type":"code","source":["# #####################################################################\n","# #######         CHESS\n","# #####################################################################\n","\n","# data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/chess/king-rook-vs-king-pawn/kr-vs-kp.data', header=None)\n","# # data = data.values\n","# mymap = {'f': 0., 't': 1., 'n': 0., 'w': 1., 'b': 2., 'l': 0., 'g': 1., 'won': 1., 'nowin': 2.}\n","# data = data.applymap(lambda s: mymap.get(s) if s in mymap else s)\n","\n","# print(data.shape[0])\n","# data = data.replace(\"?\",np.NaN)\n","# print(data.isnull().values.any())\n","# data.dropna(inplace=True)\n","# print(data.shape[0])\n","# dataArray = data.to_numpy()\n","\n","# print(\"Data: \", data)\n","\n","# features  = np.asarray(dataArray[:, 0:-1])\n","# target = np.asarray(dataArray[:, -1])"],"metadata":{"id":"LkDN1thfv9K_","executionInfo":{"status":"ok","timestamp":1651546562684,"user_tz":-330,"elapsed":12,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"}}},"execution_count":147,"outputs":[]},{"cell_type":"code","source":["# #####################################################################\n","# #######         TIC-TAC-TOE\n","# #####################################################################\n","\n","# data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/tic-tac-toe/tic-tac-toe.data', header=None)\n","# # data = data.values\n","# mymap = {'x': 1., 'o': 2., 'b': 3., 'positive': 1., 'negative': 2.}\n","# data = data.applymap(lambda s: mymap.get(s) if s in mymap else s)\n","\n","# print(data.shape[0])\n","# data = data.replace(\"?\",np.NaN)\n","# print(data.isnull().values.any())\n","# data.dropna(inplace=True)\n","# print(data.shape[0])\n","# dataArray = data.to_numpy()\n","\n","# print(\"Data: \", data)\n","\n","# features  = np.asarray(dataArray[:, 0:-1])\n","# target = np.asarray(dataArray[:, -1])"],"metadata":{"id":"K7WQKSLNAB2G","executionInfo":{"status":"ok","timestamp":1651546562685,"user_tz":-330,"elapsed":12,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"}}},"execution_count":148,"outputs":[]},{"cell_type":"code","source":["# #####################################################################\n","# #######         WDBC\n","# #####################################################################\n","\n","# data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data', header=None)\n","# # data = data.values\n","# mymap = {'M': 1., 'B': 2.}\n","# data = data.applymap(lambda s: mymap.get(s) if s in mymap else s)\n","# data = data.loc[:, data.columns != 0]\n","\n","# print(data.shape[0])\n","# data = data.replace(\"?\",np.NaN)\n","# print(data.isnull().values.any())\n","# data.dropna(inplace=True)\n","# print(data.shape[0])\n","# dataArray = data.to_numpy()\n","\n","# print(\"Data: \", data)\n","\n","# features  = np.asarray(dataArray[:, 1:])\n","# target = np.asarray(dataArray[:, 0])"],"metadata":{"id":"UhWVUZqtxEzz","executionInfo":{"status":"ok","timestamp":1651546562685,"user_tz":-330,"elapsed":12,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"}}},"execution_count":149,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dPrVsZhAFTfQ","executionInfo":{"status":"ok","timestamp":1651546563375,"user_tz":-330,"elapsed":701,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"}},"outputId":"31a0a404-e8bd-459b-bfb3-8f0d13c03e40"},"source":["print(\"Feature: \", features)"],"execution_count":150,"outputs":[{"output_type":"stream","name":"stdout","text":["Feature:  [[1. 0. 0. ... 0. 0. 1.]\n"," [1. 0. 0. ... 1. 0. 1.]\n"," [0. 0. 1. ... 1. 0. 0.]\n"," ...\n"," [1. 0. 0. ... 1. 0. 1.]\n"," [0. 0. 1. ... 0. 0. 0.]\n"," [0. 1. 1. ... 1. 0. 0.]]\n"]}]},{"cell_type":"code","metadata":{"id":"XtX3qwmX9qVR","executionInfo":{"status":"ok","timestamp":1651546563376,"user_tz":-330,"elapsed":25,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"6842e083-92b3-4527-c9e3-5230a5a656b5"},"source":["print(\"Target: \", target)"],"execution_count":151,"outputs":[{"output_type":"stream","name":"stdout","text":["Target:  [1. 1. 4. 1. 1. 1. 1. 4. 4. 1. 1. 2. 4. 7. 7. 7. 2. 1. 4. 1. 2. 2. 1. 2.\n"," 6. 5. 5. 1. 1. 1. 6. 1. 1. 2. 4. 1. 1. 2. 4. 6. 6. 2. 6. 2. 1. 1. 7. 1.\n"," 1. 1. 1. 6. 5. 7. 1. 1. 2. 2. 2. 2. 4. 4. 3. 1. 1. 1. 1. 1. 1. 1. 1. 2.\n"," 7. 4. 1. 1. 3. 7. 2. 2. 3. 7. 4. 2. 1. 7. 4. 2. 6. 5. 3. 3. 4. 1. 1. 2.\n"," 1. 6. 1. 7. 2.]\n"]}]},{"cell_type":"code","metadata":{"id":"8vLuNbkZ-XcK","executionInfo":{"status":"ok","timestamp":1651546563377,"user_tz":-330,"elapsed":17,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"}}},"source":["num_runs = 20    # number of independent runs\n","k        = 5     # k-value in KNN\n","N        = 5     # number of particles\n","T        = 20    # maximum number of iterations\n","cv       = 10    # K-fold cross-validation\n","opts     = {'k':k, 'N':N, 'T':T, 'cv': cv}\n","dim      = features.shape[1]"],"execution_count":152,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3wRzIhMkAMZ6","executionInfo":{"status":"ok","timestamp":1651546622031,"user_tz":-330,"elapsed":58670,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"}},"outputId":"341602a9-8e65-4b8e-b195-987d499967d4"},"source":["acc_arr          = []\n","feature_size_arr = []\n","time_arr         = []\n","fitness          = []\n","run_count        = 0\n","\n","while run_count < num_runs:\n","  start_time = time.time()\n","  run_count += 1\n","  print(\"Run \", run_count)\n","  print(\"-----------------------------------\")\n","  fmdl = gwo_ssa_serial(features, target, opts)\n","  sf   = fmdl['sf']\n","  \n","  if sf.size == 0:\n","    sf = np.arange(dim)\n","    \n","  print(\"SF\", sf)\n","\n","  kf = KFold(n_splits=cv, shuffle=True, random_state=2)\n","\n","  total_Acc = 0\n","\n","  for train_index, test_index in kf.split(features):\n","    X_train, X_test = features[train_index], features[test_index]\n","    y_train, y_test = target[train_index], target[test_index]\n","\n","    # Number of instances\n","    num_train = np.size(X_train, 0)\n","    num_test  = np.size(X_test, 0)\n","    \n","    # Define selected features\n","    xtrain = X_train[:, sf]\n","    ytrain = y_train.reshape(num_train)\n","    xtest  = X_test[:, sf]\n","    ytest  = y_test.reshape(num_test)\n","\n","    # Training\n","    knn = KNeighborsClassifier(n_neighbors=k)\n","    knn.fit(xtrain, ytrain)\n","\n","    # Prediction\n","    ypred = knn.predict(xtest)\n","    acc   = np.sum(ytest == ypred) / num_test\n","\n","    total_Acc = total_Acc + acc\n","\n","  time_arr.append(time.time() - start_time)\n","\n","  Accuracy = 100 * (total_Acc/cv)\n","  print(\"Accuracy:\", Accuracy)\n","  acc_arr.append(Accuracy)\n","\n","  num_feat = fmdl['nf']\n","  print(\"Feature Size:\", num_feat)\n","  feature_size_arr.append(num_feat)\n","\n","  fitt = fmdl['c'][0].min()\n","  print(\"Fitness\", fitt)\n","  fitness.append(fitt)\n","  print(\"--------------------------------------------------\")"],"execution_count":153,"outputs":[{"output_type":"stream","name":"stdout","text":["Run  1\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.13155\n","Iteration: 2\n","Best (GWO + SSA (Serial)): 0.11272499999999998\n","Iteration: 3\n","Best (GWO + SSA (Serial)): 0.06565\n","Iteration: 4\n","Best (GWO + SSA (Serial)): 0.06565\n","Iteration: 5\n","Best (GWO + SSA (Serial)): 0.06565\n","Iteration: 6\n","Best (GWO + SSA (Serial)): 0.065025\n","Iteration: 7\n","Best (GWO + SSA (Serial)): 0.065025\n","Iteration: 8\n","Best (GWO + SSA (Serial)): 0.065025\n","Iteration: 9\n","Best (GWO + SSA (Serial)): 0.065025\n","Iteration: 10\n","Best (GWO + SSA (Serial)): 0.065025\n","Iteration: 11\n","Best (GWO + SSA (Serial)): 0.065025\n","Iteration: 12\n","Best (GWO + SSA (Serial)): 0.065025\n","Iteration: 13\n","Best (GWO + SSA (Serial)): 0.065025\n","Iteration: 14\n","Best (GWO + SSA (Serial)): 0.065025\n","Iteration: 15\n","Best (GWO + SSA (Serial)): 0.065025\n","Iteration: 16\n","Best (GWO + SSA (Serial)): 0.065025\n","Iteration: 17\n","Best (GWO + SSA (Serial)): 0.065025\n","Iteration: 18\n","Best (GWO + SSA (Serial)): 0.065025\n","Iteration: 19\n","Best (GWO + SSA (Serial)): 0.065025\n","Iteration: 20\n","Best (GWO + SSA (Serial)): 0.065025\n","SF [ 1  2  3  5  6  7  9 11 15]\n","Accuracy: 94.0\n","Feature Size: 9\n","Fitness 0.065025\n","--------------------------------------------------\n","Run  2\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.11577499999999996\n","Iteration: 2\n","Best (GWO + SSA (Serial)): 0.11514999999999996\n","Iteration: 3\n","Best (GWO + SSA (Serial)): 0.11514999999999996\n","Iteration: 4\n","Best (GWO + SSA (Serial)): 0.114875\n","Iteration: 5\n","Best (GWO + SSA (Serial)): 0.10524999999999998\n","Iteration: 6\n","Best (GWO + SSA (Serial)): 0.09507499999999999\n","Iteration: 7\n","Best (GWO + SSA (Serial)): 0.09444999999999999\n","Iteration: 8\n","Best (GWO + SSA (Serial)): 0.09444999999999999\n","Iteration: 9\n","Best (GWO + SSA (Serial)): 0.09444999999999999\n","Iteration: 10\n","Best (GWO + SSA (Serial)): 0.09444999999999999\n","Iteration: 11\n","Best (GWO + SSA (Serial)): 0.09444999999999999\n","Iteration: 12\n","Best (GWO + SSA (Serial)): 0.09444999999999999\n","Iteration: 13\n","Best (GWO + SSA (Serial)): 0.09444999999999999\n","Iteration: 14\n","Best (GWO + SSA (Serial)): 0.09444999999999999\n","Iteration: 15\n","Best (GWO + SSA (Serial)): 0.09444999999999999\n","Iteration: 16\n","Best (GWO + SSA (Serial)): 0.09444999999999999\n","Iteration: 17\n","Best (GWO + SSA (Serial)): 0.09444999999999999\n","Iteration: 18\n","Best (GWO + SSA (Serial)): 0.09444999999999999\n","Iteration: 19\n","Best (GWO + SSA (Serial)): 0.09444999999999999\n","Iteration: 20\n","Best (GWO + SSA (Serial)): 0.09444999999999999\n","SF [ 0  3  4  6  7  8 11 13 14 15]\n","Accuracy: 91.0909090909091\n","Feature Size: 10\n","Fitness 0.09444999999999999\n","--------------------------------------------------\n","Run  3\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.11265000000000001\n","Iteration: 2\n","Best (GWO + SSA (Serial)): 0.097225\n","Iteration: 3\n","Best (GWO + SSA (Serial)): 0.0759\n","Iteration: 4\n","Best (GWO + SSA (Serial)): 0.0759\n","Iteration: 5\n","Best (GWO + SSA (Serial)): 0.0759\n","Iteration: 6\n","Best (GWO + SSA (Serial)): 0.0759\n","Iteration: 7\n","Best (GWO + SSA (Serial)): 0.0759\n","Iteration: 8\n","Best (GWO + SSA (Serial)): 0.0759\n","Iteration: 9\n","Best (GWO + SSA (Serial)): 0.0759\n","Iteration: 10\n","Best (GWO + SSA (Serial)): 0.07465\n","Iteration: 11\n","Best (GWO + SSA (Serial)): 0.07465\n","Iteration: 12\n","Best (GWO + SSA (Serial)): 0.07465\n","Iteration: 13\n","Best (GWO + SSA (Serial)): 0.056100000000000004\n","Iteration: 14\n","Best (GWO + SSA (Serial)): 0.056100000000000004\n","Iteration: 15\n","Best (GWO + SSA (Serial)): 0.056100000000000004\n","Iteration: 16\n","Best (GWO + SSA (Serial)): 0.056100000000000004\n","Iteration: 17\n","Best (GWO + SSA (Serial)): 0.056100000000000004\n","Iteration: 18\n","Best (GWO + SSA (Serial)): 0.056100000000000004\n","Iteration: 19\n","Best (GWO + SSA (Serial)): 0.056100000000000004\n","Iteration: 20\n","Best (GWO + SSA (Serial)): 0.056100000000000004\n","SF [ 0  1  2  3  4  8  9 10 11 13 14 15]\n","Accuracy: 95.0909090909091\n","Feature Size: 12\n","Fitness 0.056100000000000004\n","--------------------------------------------------\n","Run  4\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.1056\n","Iteration: 2\n","Best (GWO + SSA (Serial)): 0.044324999999999996\n","Iteration: 3\n","Best (GWO + SSA (Serial)): 0.044324999999999996\n","Iteration: 4\n","Best (GWO + SSA (Serial)): 0.044324999999999996\n","Iteration: 5\n","Best (GWO + SSA (Serial)): 0.044324999999999996\n","Iteration: 6\n","Best (GWO + SSA (Serial)): 0.044324999999999996\n","Iteration: 7\n","Best (GWO + SSA (Serial)): 0.044324999999999996\n","Iteration: 8\n","Best (GWO + SSA (Serial)): 0.044324999999999996\n","Iteration: 9\n","Best (GWO + SSA (Serial)): 0.044324999999999996\n","Iteration: 10\n","Best (GWO + SSA (Serial)): 0.044324999999999996\n","Iteration: 11\n","Best (GWO + SSA (Serial)): 0.044324999999999996\n","Iteration: 12\n","Best (GWO + SSA (Serial)): 0.044324999999999996\n","Iteration: 13\n","Best (GWO + SSA (Serial)): 0.044324999999999996\n","Iteration: 14\n","Best (GWO + SSA (Serial)): 0.044324999999999996\n","Iteration: 15\n","Best (GWO + SSA (Serial)): 0.044324999999999996\n","Iteration: 16\n","Best (GWO + SSA (Serial)): 0.044324999999999996\n","Iteration: 17\n","Best (GWO + SSA (Serial)): 0.044324999999999996\n","Iteration: 18\n","Best (GWO + SSA (Serial)): 0.044324999999999996\n","Iteration: 19\n","Best (GWO + SSA (Serial)): 0.044324999999999996\n","Iteration: 20\n","Best (GWO + SSA (Serial)): 0.044324999999999996\n","SF [ 0  1  2  3  4  5  8 11 14]\n","Accuracy: 96.0909090909091\n","Feature Size: 9\n","Fitness 0.044324999999999996\n","--------------------------------------------------\n","Run  5\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.13494999999999996\n","Iteration: 2\n","Best (GWO + SSA (Serial)): 0.097225\n","Iteration: 3\n","Best (GWO + SSA (Serial)): 0.097225\n","Iteration: 4\n","Best (GWO + SSA (Serial)): 0.0966\n","Iteration: 5\n","Best (GWO + SSA (Serial)): 0.087325\n","Iteration: 6\n","Best (GWO + SSA (Serial)): 0.0867\n","Iteration: 7\n","Best (GWO + SSA (Serial)): 0.0867\n","Iteration: 8\n","Best (GWO + SSA (Serial)): 0.0867\n","Iteration: 9\n","Best (GWO + SSA (Serial)): 0.0867\n","Iteration: 10\n","Best (GWO + SSA (Serial)): 0.0867\n","Iteration: 11\n","Best (GWO + SSA (Serial)): 0.0867\n","Iteration: 12\n","Best (GWO + SSA (Serial)): 0.0867\n","Iteration: 13\n","Best (GWO + SSA (Serial)): 0.0867\n","Iteration: 14\n","Best (GWO + SSA (Serial)): 0.0867\n","Iteration: 15\n","Best (GWO + SSA (Serial)): 0.0867\n","Iteration: 16\n","Best (GWO + SSA (Serial)): 0.0867\n","Iteration: 17\n","Best (GWO + SSA (Serial)): 0.0867\n","Iteration: 18\n","Best (GWO + SSA (Serial)): 0.0867\n","Iteration: 19\n","Best (GWO + SSA (Serial)): 0.0867\n","Iteration: 20\n","Best (GWO + SSA (Serial)): 0.0867\n","SF [ 0  1  2  4  5  6  7  8  9 10 13 15]\n","Accuracy: 92.00000000000001\n","Feature Size: 12\n","Fitness 0.0867\n","--------------------------------------------------\n","Run  6\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.12290000000000001\n","Iteration: 2\n","Best (GWO + SSA (Serial)): 0.11514999999999996\n","Iteration: 3\n","Best (GWO + SSA (Serial)): 0.11514999999999996\n","Iteration: 4\n","Best (GWO + SSA (Serial)): 0.11514999999999996\n","Iteration: 5\n","Best (GWO + SSA (Serial)): 0.11514999999999996\n","Iteration: 6\n","Best (GWO + SSA (Serial)): 0.084825\n","Iteration: 7\n","Best (GWO + SSA (Serial)): 0.084825\n","Iteration: 8\n","Best (GWO + SSA (Serial)): 0.084825\n","Iteration: 9\n","Best (GWO + SSA (Serial)): 0.0842\n","Iteration: 10\n","Best (GWO + SSA (Serial)): 0.0842\n","Iteration: 11\n","Best (GWO + SSA (Serial)): 0.0842\n","Iteration: 12\n","Best (GWO + SSA (Serial)): 0.0842\n","Iteration: 13\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","Iteration: 14\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","Iteration: 15\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","Iteration: 16\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","Iteration: 17\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","Iteration: 18\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","Iteration: 19\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","Iteration: 20\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","SF [ 0  1  2  3  4  7  9 13]\n","Accuracy: 93.0909090909091\n","Feature Size: 8\n","Fitness 0.07339999999999999\n","--------------------------------------------------\n","Run  7\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.12137499999999998\n","Iteration: 2\n","Best (GWO + SSA (Serial)): 0.12137499999999998\n","Iteration: 3\n","Best (GWO + SSA (Serial)): 0.084825\n","Iteration: 4\n","Best (GWO + SSA (Serial)): 0.07617499999999999\n","Iteration: 5\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","Iteration: 6\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","Iteration: 7\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","Iteration: 8\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","Iteration: 9\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","Iteration: 10\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","Iteration: 11\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","Iteration: 12\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","Iteration: 13\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","Iteration: 14\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","Iteration: 15\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","Iteration: 16\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","Iteration: 17\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","Iteration: 18\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","Iteration: 19\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","Iteration: 20\n","Best (GWO + SSA (Serial)): 0.07339999999999999\n","SF [ 0  1  2  4  7  9 13 15]\n","Accuracy: 93.0909090909091\n","Feature Size: 8\n","Fitness 0.07339999999999999\n","--------------------------------------------------\n","Run  8\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.12692499999999995\n","Iteration: 2\n","Best (GWO + SSA (Serial)): 0.0966\n","Iteration: 3\n","Best (GWO + SSA (Serial)): 0.083575\n","Iteration: 4\n","Best (GWO + SSA (Serial)): 0.07465\n","Iteration: 5\n","Best (GWO + SSA (Serial)): 0.07465\n","Iteration: 6\n","Best (GWO + SSA (Serial)): 0.07465\n","Iteration: 7\n","Best (GWO + SSA (Serial)): 0.07465\n","Iteration: 8\n","Best (GWO + SSA (Serial)): 0.07465\n","Iteration: 9\n","Best (GWO + SSA (Serial)): 0.074025\n","Iteration: 10\n","Best (GWO + SSA (Serial)): 0.074025\n","Iteration: 11\n","Best (GWO + SSA (Serial)): 0.0635\n","Iteration: 12\n","Best (GWO + SSA (Serial)): 0.0635\n","Iteration: 13\n","Best (GWO + SSA (Serial)): 0.0635\n","Iteration: 14\n","Best (GWO + SSA (Serial)): 0.0635\n","Iteration: 15\n","Best (GWO + SSA (Serial)): 0.0635\n","Iteration: 16\n","Best (GWO + SSA (Serial)): 0.0635\n","Iteration: 17\n","Best (GWO + SSA (Serial)): 0.0635\n","Iteration: 18\n","Best (GWO + SSA (Serial)): 0.0635\n","Iteration: 19\n","Best (GWO + SSA (Serial)): 0.0635\n","Iteration: 20\n","Best (GWO + SSA (Serial)): 0.0635\n","SF [ 1  3  4  7  8 11 13 15]\n","Accuracy: 94.09090909090911\n","Feature Size: 8\n","Fitness 0.0635\n","--------------------------------------------------\n","Run  9\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.14297500000000002\n","Iteration: 2\n","Best (GWO + SSA (Serial)): 0.11452500000000002\n","Iteration: 3\n","Best (GWO + SSA (Serial)): 0.11452500000000002\n","Iteration: 4\n","Best (GWO + SSA (Serial)): 0.066275\n","Iteration: 5\n","Best (GWO + SSA (Serial)): 0.066275\n","Iteration: 6\n","Best (GWO + SSA (Serial)): 0.066275\n","Iteration: 7\n","Best (GWO + SSA (Serial)): 0.066275\n","Iteration: 8\n","Best (GWO + SSA (Serial)): 0.066275\n","Iteration: 9\n","Best (GWO + SSA (Serial)): 0.055475000000000003\n","Iteration: 10\n","Best (GWO + SSA (Serial)): 0.055475000000000003\n","Iteration: 11\n","Best (GWO + SSA (Serial)): 0.055475000000000003\n","Iteration: 12\n","Best (GWO + SSA (Serial)): 0.055475000000000003\n","Iteration: 13\n","Best (GWO + SSA (Serial)): 0.055475000000000003\n","Iteration: 14\n","Best (GWO + SSA (Serial)): 0.055475000000000003\n","Iteration: 15\n","Best (GWO + SSA (Serial)): 0.055475000000000003\n","Iteration: 16\n","Best (GWO + SSA (Serial)): 0.055475000000000003\n","Iteration: 17\n","Best (GWO + SSA (Serial)): 0.055475000000000003\n","Iteration: 18\n","Best (GWO + SSA (Serial)): 0.055475000000000003\n","Iteration: 19\n","Best (GWO + SSA (Serial)): 0.055475000000000003\n","Iteration: 20\n","Best (GWO + SSA (Serial)): 0.055475000000000003\n","SF [ 0  1  2  3  4  8  9 10 11 13 15]\n","Accuracy: 95.0909090909091\n","Feature Size: 11\n","Fitness 0.055475000000000003\n","--------------------------------------------------\n","Run  10\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.14109999999999995\n","Iteration: 2\n","Best (GWO + SSA (Serial)): 0.12442499999999997\n","Iteration: 3\n","Best (GWO + SSA (Serial)): 0.10185\n","Iteration: 4\n","Best (GWO + SSA (Serial)): 0.10185\n","Iteration: 5\n","Best (GWO + SSA (Serial)): 0.07277499999999999\n","Iteration: 6\n","Best (GWO + SSA (Serial)): 0.07277499999999999\n","Iteration: 7\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 8\n","Best (GWO + SSA (Serial)): 0.05485\n","Iteration: 9\n","Best (GWO + SSA (Serial)): 0.05485\n","Iteration: 10\n","Best (GWO + SSA (Serial)): 0.05485\n","Iteration: 11\n","Best (GWO + SSA (Serial)): 0.054225\n","Iteration: 12\n","Best (GWO + SSA (Serial)): 0.054225\n","Iteration: 13\n","Best (GWO + SSA (Serial)): 0.054225\n","Iteration: 14\n","Best (GWO + SSA (Serial)): 0.054225\n","Iteration: 15\n","Best (GWO + SSA (Serial)): 0.054225\n","Iteration: 16\n","Best (GWO + SSA (Serial)): 0.054225\n","Iteration: 17\n","Best (GWO + SSA (Serial)): 0.054225\n","Iteration: 18\n","Best (GWO + SSA (Serial)): 0.054225\n","Iteration: 19\n","Best (GWO + SSA (Serial)): 0.054225\n","Iteration: 20\n","Best (GWO + SSA (Serial)): 0.054225\n","SF [ 1  2  3  4  8  9 10 11 13]\n","Accuracy: 95.0909090909091\n","Feature Size: 9\n","Fitness 0.054225\n","--------------------------------------------------\n","Run  11\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.10525\n","Iteration: 2\n","Best (GWO + SSA (Serial)): 0.087325\n","Iteration: 3\n","Best (GWO + SSA (Serial)): 0.0768\n","Iteration: 4\n","Best (GWO + SSA (Serial)): 0.067525\n","Iteration: 5\n","Best (GWO + SSA (Serial)): 0.067525\n","Iteration: 6\n","Best (GWO + SSA (Serial)): 0.067525\n","Iteration: 7\n","Best (GWO + SSA (Serial)): 0.067525\n","Iteration: 8\n","Best (GWO + SSA (Serial)): 0.067525\n","Iteration: 9\n","Best (GWO + SSA (Serial)): 0.067525\n","Iteration: 10\n","Best (GWO + SSA (Serial)): 0.067525\n","Iteration: 11\n","Best (GWO + SSA (Serial)): 0.067525\n","Iteration: 12\n","Best (GWO + SSA (Serial)): 0.067525\n","Iteration: 13\n","Best (GWO + SSA (Serial)): 0.067525\n","Iteration: 14\n","Best (GWO + SSA (Serial)): 0.067525\n","Iteration: 15\n","Best (GWO + SSA (Serial)): 0.067525\n","Iteration: 16\n","Best (GWO + SSA (Serial)): 0.067525\n","Iteration: 17\n","Best (GWO + SSA (Serial)): 0.067525\n","Iteration: 18\n","Best (GWO + SSA (Serial)): 0.067525\n","Iteration: 19\n","Best (GWO + SSA (Serial)): 0.067525\n","Iteration: 20\n","Best (GWO + SSA (Serial)): 0.067525\n","SF [ 1  2  3  4  6  7  8  9 10 11 13 14 15]\n","Accuracy: 94.0\n","Feature Size: 13\n","Fitness 0.067525\n","--------------------------------------------------\n","Run  12\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.104625\n","Iteration: 2\n","Best (GWO + SSA (Serial)): 0.077425\n","Iteration: 3\n","Best (GWO + SSA (Serial)): 0.077425\n","Iteration: 4\n","Best (GWO + SSA (Serial)): 0.0768\n","Iteration: 5\n","Best (GWO + SSA (Serial)): 0.0768\n","Iteration: 6\n","Best (GWO + SSA (Serial)): 0.07590000000000001\n","Iteration: 7\n","Best (GWO + SSA (Serial)): 0.07590000000000001\n","Iteration: 8\n","Best (GWO + SSA (Serial)): 0.07590000000000001\n","Iteration: 9\n","Best (GWO + SSA (Serial)): 0.07590000000000001\n","Iteration: 10\n","Best (GWO + SSA (Serial)): 0.07590000000000001\n","Iteration: 11\n","Best (GWO + SSA (Serial)): 0.07590000000000001\n","Iteration: 12\n","Best (GWO + SSA (Serial)): 0.07590000000000001\n","Iteration: 13\n","Best (GWO + SSA (Serial)): 0.07590000000000001\n","Iteration: 14\n","Best (GWO + SSA (Serial)): 0.07590000000000001\n","Iteration: 15\n","Best (GWO + SSA (Serial)): 0.07590000000000001\n","Iteration: 16\n","Best (GWO + SSA (Serial)): 0.07590000000000001\n","Iteration: 17\n","Best (GWO + SSA (Serial)): 0.07590000000000001\n","Iteration: 18\n","Best (GWO + SSA (Serial)): 0.07590000000000001\n","Iteration: 19\n","Best (GWO + SSA (Serial)): 0.07590000000000001\n","Iteration: 20\n","Best (GWO + SSA (Serial)): 0.07590000000000001\n","SF [ 0  1  2  3  4  5  6  8  9 10 11 15]\n","Accuracy: 93.0909090909091\n","Feature Size: 12\n","Fitness 0.07590000000000001\n","--------------------------------------------------\n","Run  13\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.12817499999999998\n","Iteration: 2\n","Best (GWO + SSA (Serial)): 0.09785\n","Iteration: 3\n","Best (GWO + SSA (Serial)): 0.06689999999999999\n","Iteration: 4\n","Best (GWO + SSA (Serial)): 0.06689999999999999\n","Iteration: 5\n","Best (GWO + SSA (Serial)): 0.06689999999999999\n","Iteration: 6\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 7\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 8\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 9\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 10\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 11\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 12\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 13\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 14\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 15\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 16\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 17\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 18\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 19\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 20\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","SF [ 0  1  2  3  4  5  6  8  9 10 11 13 14]\n","Accuracy: 95.0\n","Feature Size: 13\n","Fitness 0.057624999999999996\n","--------------------------------------------------\n","Run  14\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.11175\n","Iteration: 2\n","Best (GWO + SSA (Serial)): 0.11175\n","Iteration: 3\n","Best (GWO + SSA (Serial)): 0.08420000000000001\n","Iteration: 4\n","Best (GWO + SSA (Serial)): 0.083575\n","Iteration: 5\n","Best (GWO + SSA (Serial)): 0.07492499999999999\n","Iteration: 6\n","Best (GWO + SSA (Serial)): 0.07492499999999999\n","Iteration: 7\n","Best (GWO + SSA (Serial)): 0.07492499999999999\n","Iteration: 8\n","Best (GWO + SSA (Serial)): 0.07492499999999999\n","Iteration: 9\n","Best (GWO + SSA (Serial)): 0.07492499999999999\n","Iteration: 10\n","Best (GWO + SSA (Serial)): 0.07492499999999999\n","Iteration: 11\n","Best (GWO + SSA (Serial)): 0.07492499999999999\n","Iteration: 12\n","Best (GWO + SSA (Serial)): 0.07492499999999999\n","Iteration: 13\n","Best (GWO + SSA (Serial)): 0.07492499999999999\n","Iteration: 14\n","Best (GWO + SSA (Serial)): 0.07492499999999999\n","Iteration: 15\n","Best (GWO + SSA (Serial)): 0.07492499999999999\n","Iteration: 16\n","Best (GWO + SSA (Serial)): 0.07492499999999999\n","Iteration: 17\n","Best (GWO + SSA (Serial)): 0.07492499999999999\n","Iteration: 18\n","Best (GWO + SSA (Serial)): 0.07492499999999999\n","Iteration: 19\n","Best (GWO + SSA (Serial)): 0.07492499999999999\n","Iteration: 20\n","Best (GWO + SSA (Serial)): 0.07492499999999999\n","SF [ 1  3  4  6  7  8  9 14 15]\n","Accuracy: 93.0\n","Feature Size: 9\n","Fitness 0.07492499999999999\n","--------------------------------------------------\n","Run  15\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.10337499999999998\n","Iteration: 2\n","Best (GWO + SSA (Serial)): 0.06475\n","Iteration: 3\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 4\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 5\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 6\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 7\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 8\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 9\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 10\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 11\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 12\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 13\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 14\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 15\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 16\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 17\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 18\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 19\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 20\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","SF [ 0  1  2  4  5  8  9 11 15]\n","Accuracy: 94.09090909090911\n","Feature Size: 9\n","Fitness 0.06412499999999999\n","--------------------------------------------------\n","Run  16\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.1353\n","Iteration: 2\n","Best (GWO + SSA (Serial)): 0.09785\n","Iteration: 3\n","Best (GWO + SSA (Serial)): 0.0768\n","Iteration: 4\n","Best (GWO + SSA (Serial)): 0.0768\n","Iteration: 5\n","Best (GWO + SSA (Serial)): 0.0768\n","Iteration: 6\n","Best (GWO + SSA (Serial)): 0.0768\n","Iteration: 7\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 8\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 9\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 10\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 11\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 12\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 13\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 14\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 15\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 16\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 17\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 18\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 19\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","Iteration: 20\n","Best (GWO + SSA (Serial)): 0.057624999999999996\n","SF [ 0  1  2  3  4  5  6  8  9 10 11 13 14]\n","Accuracy: 95.0\n","Feature Size: 13\n","Fitness 0.057624999999999996\n","--------------------------------------------------\n","Run  17\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.13315\n","Iteration: 2\n","Best (GWO + SSA (Serial)): 0.10712500000000001\n","Iteration: 3\n","Best (GWO + SSA (Serial)): 0.07465\n","Iteration: 4\n","Best (GWO + SSA (Serial)): 0.07465\n","Iteration: 5\n","Best (GWO + SSA (Serial)): 0.07465\n","Iteration: 6\n","Best (GWO + SSA (Serial)): 0.07465\n","Iteration: 7\n","Best (GWO + SSA (Serial)): 0.07465\n","Iteration: 8\n","Best (GWO + SSA (Serial)): 0.07465\n","Iteration: 9\n","Best (GWO + SSA (Serial)): 0.07465\n","Iteration: 10\n","Best (GWO + SSA (Serial)): 0.07465\n","Iteration: 11\n","Best (GWO + SSA (Serial)): 0.07465\n","Iteration: 12\n","Best (GWO + SSA (Serial)): 0.066\n","Iteration: 13\n","Best (GWO + SSA (Serial)): 0.066\n","Iteration: 14\n","Best (GWO + SSA (Serial)): 0.066\n","Iteration: 15\n","Best (GWO + SSA (Serial)): 0.066\n","Iteration: 16\n","Best (GWO + SSA (Serial)): 0.066\n","Iteration: 17\n","Best (GWO + SSA (Serial)): 0.066\n","Iteration: 18\n","Best (GWO + SSA (Serial)): 0.066\n","Iteration: 19\n","Best (GWO + SSA (Serial)): 0.066\n","Iteration: 20\n","Best (GWO + SSA (Serial)): 0.066\n","SF [ 0  2  3  4  7  8  9 10 11 13 14 15]\n","Accuracy: 94.09090909090911\n","Feature Size: 12\n","Fitness 0.066\n","--------------------------------------------------\n","Run  18\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.0759\n","Iteration: 2\n","Best (GWO + SSA (Serial)): 0.0759\n","Iteration: 3\n","Best (GWO + SSA (Serial)): 0.0759\n","Iteration: 4\n","Best (GWO + SSA (Serial)): 0.0759\n","Iteration: 5\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 6\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 7\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 8\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 9\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 10\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 11\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 12\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 13\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 14\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 15\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 16\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 17\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 18\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 19\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","Iteration: 20\n","Best (GWO + SSA (Serial)): 0.06412499999999999\n","SF [ 1  2  3  4  7  9 13 14 15]\n","Accuracy: 94.09090909090908\n","Feature Size: 9\n","Fitness 0.06412499999999999\n","--------------------------------------------------\n","Run  19\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.11389999999999999\n","Iteration: 2\n","Best (GWO + SSA (Serial)): 0.11389999999999999\n","Iteration: 3\n","Best (GWO + SSA (Serial)): 0.0768\n","Iteration: 4\n","Best (GWO + SSA (Serial)): 0.074025\n","Iteration: 5\n","Best (GWO + SSA (Serial)): 0.066\n","Iteration: 6\n","Best (GWO + SSA (Serial)): 0.066\n","Iteration: 7\n","Best (GWO + SSA (Serial)): 0.056100000000000004\n","Iteration: 8\n","Best (GWO + SSA (Serial)): 0.056100000000000004\n","Iteration: 9\n","Best (GWO + SSA (Serial)): 0.056100000000000004\n","Iteration: 10\n","Best (GWO + SSA (Serial)): 0.056100000000000004\n","Iteration: 11\n","Best (GWO + SSA (Serial)): 0.056100000000000004\n","Iteration: 12\n","Best (GWO + SSA (Serial)): 0.056100000000000004\n","Iteration: 13\n","Best (GWO + SSA (Serial)): 0.056100000000000004\n","Iteration: 14\n","Best (GWO + SSA (Serial)): 0.056100000000000004\n","Iteration: 15\n","Best (GWO + SSA (Serial)): 0.056100000000000004\n","Iteration: 16\n","Best (GWO + SSA (Serial)): 0.056100000000000004\n","Iteration: 17\n","Best (GWO + SSA (Serial)): 0.056100000000000004\n","Iteration: 18\n","Best (GWO + SSA (Serial)): 0.056100000000000004\n","Iteration: 19\n","Best (GWO + SSA (Serial)): 0.056100000000000004\n","Iteration: 20\n","Best (GWO + SSA (Serial)): 0.056100000000000004\n","SF [ 0  1  2  3  4  7  9 10 11 13 14 15]\n","Accuracy: 95.0909090909091\n","Feature Size: 12\n","Fitness 0.056100000000000004\n","--------------------------------------------------\n","Run  20\n","-----------------------------------\n","Iteration: 1\n","Best (GWO): 0.12754999999999997\n","Iteration: 2\n","Best (GWO + SSA (Serial)): 0.12754999999999997\n","Iteration: 3\n","Best (GWO + SSA (Serial)): 0.10587500000000001\n","Iteration: 4\n","Best (GWO + SSA (Serial)): 0.10587500000000001\n","Iteration: 5\n","Best (GWO + SSA (Serial)): 0.10587500000000001\n","Iteration: 6\n","Best (GWO + SSA (Serial)): 0.0966\n","Iteration: 7\n","Best (GWO + SSA (Serial)): 0.0957\n","Iteration: 8\n","Best (GWO + SSA (Serial)): 0.0957\n","Iteration: 9\n","Best (GWO + SSA (Serial)): 0.0957\n","Iteration: 10\n","Best (GWO + SSA (Serial)): 0.0957\n","Iteration: 11\n","Best (GWO + SSA (Serial)): 0.0957\n","Iteration: 12\n","Best (GWO + SSA (Serial)): 0.0957\n","Iteration: 13\n","Best (GWO + SSA (Serial)): 0.0957\n","Iteration: 14\n","Best (GWO + SSA (Serial)): 0.08545\n","Iteration: 15\n","Best (GWO + SSA (Serial)): 0.08545\n","Iteration: 16\n","Best (GWO + SSA (Serial)): 0.08545\n","Iteration: 17\n","Best (GWO + SSA (Serial)): 0.08545\n","Iteration: 18\n","Best (GWO + SSA (Serial)): 0.08545\n","Iteration: 19\n","Best (GWO + SSA (Serial)): 0.08545\n","Iteration: 20\n","Best (GWO + SSA (Serial)): 0.08545\n","SF [ 0  1  3  5  7  9 10 13 14 15]\n","Accuracy: 92.00000000000001\n","Feature Size: 10\n","Fitness 0.08545\n","--------------------------------------------------\n"]}]},{"cell_type":"code","metadata":{"id":"lAE2cuZ-BIg1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1651546622032,"user_tz":-330,"elapsed":24,"user":{"displayName":"ASHISH KIRTI SINGH","userId":"00001312637000229366"}},"outputId":"f9a9fb3d-0f42-4866-8b59-7e7b6f2c2aca"},"source":["print(\"Average Accuracy: \", np.mean(acc_arr))\n","print(\"Average fitness: \", np.mean(fitness))\n","print(\"Average number of features selected: \", np.mean(feature_size_arr))\n","print(\"Average time taken: \", np.mean(time_arr), \"seconds\")"],"execution_count":154,"outputs":[{"output_type":"stream","name":"stdout","text":["Average Accuracy:  93.9090909090909\n","Average fitness:  0.0668\n","Average number of features selected:  10.4\n","Average time taken:  2.949838387966156 seconds\n"]}]}]}